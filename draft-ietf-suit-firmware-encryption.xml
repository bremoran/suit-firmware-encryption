<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-02" category="std">

  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2021" month="October" day="21"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF 
SUIT manifest with key establishment provided by the hybrid
public-key encryption (HPKE) scheme and the AES Key Wrap (AES-KW) 
with a pre-shared key-encryption key. Encryption of the firmware
image is encrypted using AES-GCM or AES-CCM.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="I-D.ietf-suit-information-model"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="I-D.ietf-suit-information-model"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient are defined in <xref target="I-D.irtf-cfrg-hpke"/> and have 
the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of entity which sends an encrypted message.</t>
  <t>Recipient: Role of entity which receives an encrypted message.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="I-D.irtf-cfrg-hpke"/>.</t>
</list></t>

</section>
<section anchor="arch" title="Architecture">

<t>Figure 1 in <xref target="RFC9019"/> shows the architecture for distributing firmware 
images and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images.</t>

<t><xref target="arch-fig"/> is extended to include firmware encryption. The firmware server 
and the device management infrastructure are represented by the distribution 
system. The distribution system is aware of the individual devices to which 
a firmware update has to be delivered.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |(Firmware |   |                               | Firmware +
 | Consumer)|   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |(Firmware |   |                        |              |
 | Consumer)|   | 
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |(Firmware |
 | Consumer)|
 +----------+
]]></artwork></figure>

<t>Firmware encryption requires the sender to know the firmware consumers and the 
respective credentials used by the key distribution mechanism. For AES-KW the 
KEK needs to be known and, in case of HPKE, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this will not be 
likely. The distribution system certainly has the knowledge about the 
recipients to perform firmware encryption.</t>

<t>To offer confidentiality protection for firmware images two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The firmware author acts as the sender and the recipient is the firmware consumer
(or the firmware consumers).</t>
  <t>The firmware author encrypts the firmware image with the distribution system as 
the initial recipient. Then, the distribution system decrypts and re-encrypts the 
firmware image towards the firmware consumer(s). Delegating the task of re-encrypting 
the firmware image to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted  firmware images changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the firmware image.</t>
</list></t>

<t>Irrespectively of the two variants, the key distribution data (in form of the 
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the firmware author.</t>

<t>Since the SUIT envelope is not protected cryptographically an adversary could modify<vspace />
the COSE_Encrypt structure. For example, if the attacker alters the key distribution 
data then a recipient will decrypt the firmware image with an incorrect key. This 
will lead to expending energy and flash cycles until the failure is detected. To 
mitigate this attack, the optional suit-cek-verification parameter is added to the 
manifest. Since the manifest is protected by a digital signature (or a MAC), an 
adversary cannot successfully modify this value. This parameter allows the recipient 
to verify whether the CEK has successfully been derived.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest" title="SUIT Envelope and SUIT Manifest">

<t>This specification introduces two extensions to the SUIT envelope and the manifest 
structure, as motivated in <xref target="arch"/>.</t>

<t>First, the envelope is enhanced with the suit-protection-wrappers parameter to carry 
one or multiple SUIT_Encryption_Info payloads. The content of the SUIT_Encryption_Info 
payloads is explained in <xref target="AES-KW"/> and in <xref target="HPKE"/>. When an encrypted firmware image 
is conveyed, then the suit-protection-wrappers parameter MUST be included in the 
envelope.</t>

<t>Second, the manifest is extended with the suit-cek-verification parameter. This parameter
is optional and is utilized in environments where a battery exhaustion attack is deemed 
worthwhile protecting against. Details about the CEK verification can be found 
in <xref target="cek-verification"/>.</t>

<figure title="SUIT Envelope CDDL." anchor="envelope-fig"><artwork><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  suit-protection-wrappers => bstr .cbor {
      *(int/str) => [+ SUIT_Encryption_Info]
  }
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}
]]></artwork></figure>

<figure title="SUIT Manifest CDDL." anchor="manifest-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    ? suit-cek-verification       => bstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}
]]></artwork></figure>

</section>
<section anchor="AES-KW" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options:</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK.</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. The benefit 
of this approach is that the firmware image is encrypted only once with 
the CEK while there is no sharing of the KEK. Hence, authorized recipients still 
use their individual KEKs to decrypt the CEK and to subsequently obtain the 
plaintext firmware.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. This is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap-based Firmware Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad is set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure in hex format is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        // protected field with alg=AES-GCM-128
        h'A10101', 
        {
           // unprotected field with iv
           5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null, 
        [ // recipients array
           h'', // protected field
           {    // unprotected field
              1: -3,            // alg=A128KW 
              4: h'6B69642D31'  // key id
           }, 
           // CEK encrypted with KEK
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="HPKE" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="I-D.irtf-cfrg-hpke"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE seal operation is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="cose-hpke"/> defines the use of HPKE with COSE and this specification profiles it.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

; Layer 0
COSE_Encrypt = [
  protected   : bstr .cbor header_map, ; must contain alg
  unprotected : header_map,            ; must contain iv
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [+COSE_recipient_outer]
]

; Layer 1   
COSE_recipient_outer = [
  protected   : bstr .size 0,
  unprotected : header_map, ; must contain alg
  encCEK      : bstr,       ; CEK encrypted based on HPKE algo
  recipients  : [ + COSE_recipient_inner ]  
]

; Layer 2
COSE_recipient_inner = [
  protected   : bstr .cbor header_map, ; must contain HPKE alg
  unprotected : header_map, ; must contain kid and ephemeral public key
  empty       : null,
  empty       : null
]

header_map = {
  Generic_Headers,
  * label =values,
}

Generic_Headers = (
    ? 1 => int,         ; algorithm identifier
    ? 2 => crv,         ; EC identifier
    ? 4 => bstr,        ; key identifier
    ? 5 => bstr         ; IV
)
]]></artwork></figure>

<t>The COSE_Encrypt structure (layer 0) contains algorithm parameters for 
encryption of the firmware image. The protected field MUST contain the ‘alg’ parameter 
and the unprotected field MUST contain the ‘iv’ parameter. The ciphertext is always 
detached.</t>

<t>The COSE_recipient_outer structure (layer 1) contains the encrypted CEK. The
protected structure MUST be empty and the unprotected structure MUST contain the 
‘alg’ parameter, which carries the algorithm information for protecting the CEK.</t>

<t>The COSE_recipient_inner structure (layer 2) contains the HPKE-related information. 
The protected structure MUST contain the ‘alg’ parameter set to the algorithm values in 
Section 6 of <xref target="cose-hpke"/> and the unprotected structure MUST contain the ‘kid’ and 
the ‘ephemeral’ parameter.</t>

<t>The encrypted CEK and the ephemeral public key of the sender are generated as part 
of the HPKE algorithm, as described in Figure 2 of <xref target="cose-hpke"/> .</t>

<t>Finally, the firmware image is encrypted using the CEK with the selected algorithm.</t>

<t>The recipient decrypts the encrypted CEK, using two input parameters:</t>

<t><list style="symbols">
  <t>the private key skR corresponding to the public key pkR used by the sender.</t>
  <t>the HPKE encapsulated key (i.e. ephemeral ECDH public key) created by the sender.</t>
</list></t>

<t>If the HPKE operation is successful, the recipient obtains the CEK and can decrypt the 
firmware. The decryption operation is shown in Figure 4 of <xref target="cose-hpke"/>.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is 
shown in <xref target="hpke-example"/>. It uses the following algorithm 
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of the firmware image.</t>
  <t>AES-GCM-128 for encrytion of the CEK.</t>
  <t>Key Encapsulation Mechanism (KEM): NIST P-256</t>
  <t>Key Derivation Function (KDF): HKDF-SHA256</t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96( 
    [
        // protected field with alg=AES-GCM-128
        h'A10101',   
        {    // unprotected field with iv
             5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null,  
        [  // COSE_recipient_outer
            h'',          // empty protected field
            {             // unprotected field with ... 
                 1: 1     //     alg=A128GCM
            },
            // Encrypted CEK
            h'FA55A50CF110908DA6443149F2C2062011A7D8333A72721A',
            [    // COSE_recipient_inner
                 // protected field with alg HPKE/P-256+HKDF-256 (new)
                 h'A1013818',
                 {  // unprotected field with ...
                    //    HPKE encapsulated key
                    -1: h'A4010220012158205F...979D51687187510C445’,
                    //    kid for recipient static ECDH public key
                     4: h'6B69642D31'
                 }, 
                 // empty ciphertext
                 null
            ]
        ]
     ]
)
]]></artwork></figure>

</section>
<section anchor="cek-verification" title="CEK Verification">

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK.</t>

<t>TBD: Decide what IV to use.</t>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>TBD: Example for complete manifest here (which also includes the digital signature).
TBD: Multiple recipient example as well. 
TBD: Encryption of manifest (in addition of firmware encryption).</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3394" target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2002' month='September' />
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg">
	 <organization>Inria</organization>
      </author>
      <date month="July" day="12" year="2021" />
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-14" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-14.txt" />
</reference>


<reference anchor="I-D.irtf-cfrg-hpke">
   <front>
      <title>Hybrid Public Key Encryption</title>
      <author fullname="Richard L. Barnes">
	 <organization>Cisco</organization>
      </author>
      <author fullname="Karthik Bhargavan">
	 <organization>Inria</organization>
      </author>
      <author fullname="Benjamin Lipp">
	 <organization>Inria</organization>
      </author>
      <author fullname="Christopher A. Wood">
	 <organization>Cloudflare</organization>
      </author>
      <date month="September" day="2" year="2021" />
      <abstract>
	 <t>   This document describes a scheme for hybrid public-key encryption
   (HPKE).  This scheme provides a variant of public-key encryption of
   arbitrary-sized plaintexts for a recipient public key.  It also
   includes three authenticated variants, including one which
   authenticates possession of a pre-shared key, and two optional ones
   which authenticate possession of a KEM private key.  HPKE works for
   any combination of an asymmetric key encapsulation mechanism (KEM),
   key derivation function (KDF), and authenticated encryption with
   additional data (AEAD) encryption function.  Some authenticated
   variants may not be supported by all KEMs.  We provide instantiations
   of the scheme using widely used and efficient primitives, such as
   Elliptic Curve Diffie-Hellman key agreement, HKDF, and SHA2.

   This document is a product of the Crypto Forum Research Group (CFRG)
   in the IRTF.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-hpke-12" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-irtf-cfrg-hpke-12.txt" />
</reference>


<reference anchor="cose-hpke" target="https://datatracker.ietf.org/doc/html/draft-tschofenig-cose-hpke-00">
  <front>
    <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization>Vigil Security</organization>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
    </author>
    <date year="2021" month="October" day="18"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC9019" target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author initials='B.' surname='Moran' fullname='B. Moran'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='M.' surname='Meriac' fullname='M. Meriac'><organization /></author>
<date year='2021' month='April' />
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor="I-D.ietf-suit-information-model">
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date month="July" day="8" year="2021" />
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-13" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt" />
</reference>



<reference  anchor="RFC8937" target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author initials='C.' surname='Cremers' fullname='C. Cremers'><organization /></author>
<author initials='L.' surname='Garratt' fullname='L. Garratt'><organization /></author>
<author initials='S.' surname='Smyshlyaev' fullname='S. Smyshlyaev'><organization /></author>
<author initials='N.' surname='Sullivan' fullname='N. Sullivan'><organization /></author>
<author initials='C.' surname='Wood' fullname='C. Wood'><organization /></author>
<date year='2020' month='October' />
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference  anchor="RFC2630" target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='1999' month='June' />
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference  anchor="RFC4949" target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author initials='R.' surname='Shirey' fullname='R. Shirey'><organization /></author>
<date year='2007' month='August' />
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
Aa4cpkVBXgAA

-->

</rfc>

