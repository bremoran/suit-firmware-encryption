<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-02" category="std">

  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2021" month="October" day="18"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF 
SUIT manifest with key establishment provided by the hybrid
public-key encryption (HPKE) scheme and the AES Key Wrap (AES-KW) 
with a pre-shared key-encryption key. Encryption of the firmware
image is encrypted using AES-GCM or AES-CCM.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="I-D.ietf-suit-information-model"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="I-D.ietf-suit-information-model"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>In context of encryption, the terms “recipient” and “firmware consumer” 
are used interchangeably.</t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="I-D.irtf-cfrg-hpke"/>.</t>
</list></t>

</section>
<section anchor="architecture" title="Architecture">

<t>Figure 1 in <xref target="RFC9019"/> shows the architecture for distributing firmware 
images and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images. <xref target="arch-fig"/> therefore 
focuses on those aspects. The firmware server and the device management 
infrastructure is represented by the distribution system. The distribution
system is aware of the individual devices to which a firmware update has 
to be delivered to.</t>

<t>Firmware encryption requires the party doing the encryption to know either 
the KEK (in case of AES-KW) or the public key of the recipient (in case of
HPKE). The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this will not be 
likely. Hence, it is the responsibility of the distribution system to 
perform the firmware encryption.</t>

<t>The distribution system needs to include the COSE_Encrypt structure into
the SUIT envelope rather than the manifest since any modification to the 
manifest invalidates the digital signature or the MAC added by the author.</t>

<t>Delegating the task of encrypting the firmware image to the distribution 
system offers flexiblity when the number of devices that need to receive 
encrypted  firmware images changes dynamically or when the updates to KEKs or 
recipient public keys are necessary. As a downside, the author needs 
to trust the distribution system with performing the encryption of the 
plaintext firmware image.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |          |                                   |
 |  Device  |---+                               | Firmware +
 |          |   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
 +----------+   |                        |              |
 |          |   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |          |   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |          |   |
 |  Device  +---+
 |          |
 +----------+
]]></artwork></figure>

</section>
<section anchor="aes-key-wrap" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options:</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK.</t>
  <t>If recipients have different KEKs, then the COSE_recipient structure 
may contain the same CEK encrypted with many different KEKs. The benefit 
of this approach is that the firmware image is encrypted only once with 
the CEK while the authorized recipients still need to use their 
individual KEKs to obtain the plaintext.</t>
  <t>The last option is to use different CEKs encrypted with KEKs of the 
authorized recipients. This is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap-based Firmware Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad is set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure in hex format is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        // protected field with alg=AES-GCM-128
        h'A10101', 
        {
           // unprotected field with iv
           5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null, 
        [ // recipients array
           h'', // protected field
           {    // unprotected field
              1: -3,            // alg=A128KW 
              4: h'6B69642D31'  // key id
           }, 
           // CEK encrypted with KEK
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="hybrid-public-key-encryption-hpke" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="I-D.irtf-cfrg-hpke"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE encrypt operation is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key of the author).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="cose-hpke"/> defines the use of HPKE with COSE. This specification profiles it.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

; Layer 0
COSE_Encrypt = [
  protected   : bstr .cbor header_map, ; must contain alg
  unprotected : header_map,            ; must contain iv
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [+COSE_recipient_outer]
]

; Layer 1   
COSE_recipient_outer = [
  protected   : bstr .size 0,
  unprotected : header_map, ; must contain alg
  encCEK      : bstr,       ; CEK encrypted based on HPKE algo
  recipients  : [ + COSE_recipient_inner ]  
]

; Layer 2
COSE_recipient_inner = [
  protected   : bstr .cbor header_map, ; must contain HPKE alg
  unprotected : header_map, ; must contain kid and ephemeral public key
  empty       : null,
  empty       : null
]

header_map = {
  Generic_Headers,
  * label =values,
}

Generic_Headers = (
    ? 1 => int,         ; algorithm identifier
    ? 2 => crv,         ; EC identifier
    ? 4 => bstr,        ; key identifier
    ? 5 => bstr         ; IV
)
]]></artwork></figure>

<t>The COSE_Encrypt structure (layer 0) contains algorithm parameters for 
encryption of the firmware image. The protected field MUST contain the ‘alg’ parameter 
and the unprotected field MUST contain the ‘iv’ parameter. The ciphertext is always 
detached.</t>

<t>The COSE_recipient_outer structure (layer 1) contains the encrypted CEK. The
protected structure MUST be empty and the unprotected structure MUST contain the 
‘alg’ parameter, which carries the algorithm information for protecting the CEK.</t>

<t>The COSE_recipient_inner structure (layer 2) contains the HPKE-related information. 
The protected structure MUST contain the ‘alg’ parameter set to the algorithm values in 
Section 6 of <xref target="cose-hpke"/> and the unprotected structure MUST contain the ‘kid’ and 
the ‘ephemeral’ parameter.</t>

<t>The encrypted CEK and the ephemeral public key of the sender are generated as part 
of the HPKE algorithm, as described in Figure 2 of <xref target="cose-hpke"/> .</t>

<t>Finally, the firmware image is encrypted using the CEK with the selected algorithm.</t>

<t>The recipient decrypts the encrypted CEK, using two input parameters:</t>

<t><list style="symbols">
  <t>the private key skR corresponding to the public key pkR used by the sender.</t>
  <t>the HPKE encapsulated key (i.e. ephemeral ECDH public key) created by the sender.</t>
</list></t>

<t>If the HPKE operation is successful, the recipient obtains the CEK and can decrypt the 
firmware. The decryption operation is shown in Figure 4 of <xref target="cose-hpke"/>.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is 
shown in <xref target="hpke-example"/>. It uses the following algorithm 
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of the firmware image.</t>
  <t>AES-GCM-128 for encrytion of the CEK.</t>
  <t>Key Encapsulation Mechanism (KEM): NIST P-256</t>
  <t>Key Derivation Function (KDF): HKDF-SHA256</t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96( 
    [
        // protected field with alg=AES-GCM-128
        h'A10101',   
        {    // unprotected field with iv
             5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null,  
        [  // COSE_recipient_outer
            h'',          // empty protected field
            {             // unprotected field with ... 
                 1: 1     //     alg=A128GCM
            },
            // Encrypted CEK
            h'FA55A50CF110908DA6443149F2C2062011A7D8333A72721A',
            [    // COSE_recipient_inner
                 // protected field with alg HPKE/P-256+HKDF-256 (new)
                 h'A1013818',
                 {  // unprotected field with ...
                    //    HPKE encapsulated key
                    -1: h'A4010220012158205F...979D51687187510C445’,
                    //    kid for recipient static ECDH public key
                     4: h'6B69642D31'
                 }, 
                 // empty ciphertext
                 null
            ]
        ]
     ]
)
]]></artwork></figure>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>TBD: Example for complete manifest here (which also includes the digital signature).
TBD: Multiple recipient example as well. 
TBD: Encryption of manifest (in addition of firmware encryption).</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3394" target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2002' month='September' />
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg">
	 <organization>Inria</organization>
      </author>
      <date month="July" day="12" year="2021" />
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-14" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-14.txt" />
</reference>


<reference anchor="I-D.irtf-cfrg-hpke">
   <front>
      <title>Hybrid Public Key Encryption</title>
      <author fullname="Richard L. Barnes">
	 <organization>Cisco</organization>
      </author>
      <author fullname="Karthik Bhargavan">
	 <organization>Inria</organization>
      </author>
      <author fullname="Benjamin Lipp">
	 <organization>Inria</organization>
      </author>
      <author fullname="Christopher A. Wood">
	 <organization>Cloudflare</organization>
      </author>
      <date month="September" day="2" year="2021" />
      <abstract>
	 <t>   This document describes a scheme for hybrid public-key encryption
   (HPKE).  This scheme provides a variant of public-key encryption of
   arbitrary-sized plaintexts for a recipient public key.  It also
   includes three authenticated variants, including one which
   authenticates possession of a pre-shared key, and two optional ones
   which authenticate possession of a KEM private key.  HPKE works for
   any combination of an asymmetric key encapsulation mechanism (KEM),
   key derivation function (KDF), and authenticated encryption with
   additional data (AEAD) encryption function.  Some authenticated
   variants may not be supported by all KEMs.  We provide instantiations
   of the scheme using widely used and efficient primitives, such as
   Elliptic Curve Diffie-Hellman key agreement, HKDF, and SHA2.

   This document is a product of the Crypto Forum Research Group (CFRG)
   in the IRTF.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-hpke-12" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-irtf-cfrg-hpke-12.txt" />
</reference>


<reference anchor="cose-hpke" target="https://datatracker.ietf.org/doc/html/draft-tschofenig-cose-hpke-00">
  <front>
    <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization>Vigil Security</organization>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
    </author>
    <date year="2021" month="October" day="18"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC9019" target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author initials='B.' surname='Moran' fullname='B. Moran'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='M.' surname='Meriac' fullname='M. Meriac'><organization /></author>
<date year='2021' month='April' />
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor="I-D.ietf-suit-information-model">
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date month="July" day="8" year="2021" />
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-13" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt" />
</reference>



<reference  anchor="RFC8937" target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author initials='C.' surname='Cremers' fullname='C. Cremers'><organization /></author>
<author initials='L.' surname='Garratt' fullname='L. Garratt'><organization /></author>
<author initials='S.' surname='Smyshlyaev' fullname='S. Smyshlyaev'><organization /></author>
<author initials='N.' surname='Sullivan' fullname='N. Sullivan'><organization /></author>
<author initials='C.' surname='Wood' fullname='C. Wood'><organization /></author>
<date year='2020' month='October' />
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference  anchor="RFC2630" target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='1999' month='June' />
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference  anchor="RFC4949" target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author initials='R.' surname='Shirey' fullname='R. Shirey'><organization /></author>
<date year='2007' month='August' />
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
umg1GyWqmFqeOnROS+cd5eMUc39HH6cgoE8grUxCBel+CWkSrUSo8MeNCXTQ
9VVIlRmtS0ZFVHRFVmIjmTkCG6vDL9f/fiM9D8EIHTqZz6E1RgXpMUQqxYJ6
rzoDZiQ/FREGcyj7eVQKoRS2beZXX6xhd0/8nKYK3eXbr+Krsgbptl5/8ZKM
PQU2DeypCBSlLAg5ynk9UoeWNdLeMgs/YssjRtm5TTDVNlVjzGPY9P4DcCJR
XZl040Wz3KHhFsZQlqDbEBQxO8ys91wEXoq+81WPTRm8umqzceXwo5AVQAiM
HQcQY7ZKXbHq+DtvnkCp0AF6bSSORM2vE5V2McUnzfBhheGq3z6yhVMtQE/Y
7ZzfhJFOHCVaPafORTe/nTLXVZZfsnUa+a0qNhteHOI9MnVHWfHXKXGVr1A9
4QSenOVOUiaqbdrmNadxwLW9bXr0+uL6+Iy9vQLlft/uj8ZmwlyQwOHoxS5S
NuPo9XwBgy/hv/bN5ZRGY4hk6nrsn1rYc05Oni501Vb0/qU1vUJRjwpgNS6w
CB6V9pizrfJnz9bwPhXwe5oUnU6nUs1jVADsmZn4MrU/YEBx9OdW8TOMv3Dt
VRmTxXQ0mo66s0Wv1z3tTubT8XA46A1PF32so/e7vd70ZD4ZDAbTk/5Jvzc9
LK3/i96kzofW4PGMQJGeviQh/p5EFN6wo0g8Hteso+RsMOlNygAZaj9L4vq+
XEXbWstaP6HdQzmdDkHi+/1ut9fvjSb97mgBO5yenM5HvfHkpDc5GfW6s+Fw
9L///T91sNqNMSlAQ+Aeg2FZqmzFn2gqLtd8a4aVy712dyXAdUpiXyrbcL/5
tVLULVd1Xev6xaIu0l1F43itD78Gd6kHpMonn8/PClM8M8w2/lOl5EjfN8FL
hLY9Jqu7BoDlJ1r1ulJYsW4GApJHEVDFQwFQsO52Z7whYm+Ou4WV3Bsc64tM
5lcz8J4V9kAm+obYpxep8Np42G2TEut5SlFRVnNFL++jUhdjSr32dSVV7cCo
pIkV0qf6SPN4qXL7iR1V7sPSsaXpm1WO97ilLhu0VdmNbp5CTOF4u2r8+KWt
9DUcwuE8zjb6YoyugLE0DvHGwyqBmJd+yGgXmZqTLQIX7u1jxxPFpnr/wrVG
FdUT8HYuTlJ3bop3/t1fSnBvYKVxsNP3qEvsLF9eXOhfvbBUzGKzBdvI9Ub9
DAUVIymhk+E2TjJON+e1DLxWZWfAhSYI/JmM7d65wl26hWt/hcJMpjNwX6Ze
EKd05o1KCd/J/Hwah2HvnzpyNIfy+Rw6FgCPjEylrozcHmth4dT2STjfUPeY
CSXxclqlpt1S1/RTuu8kItzCzzFe7yReIov0FW013dyryQvA6m6LCu5wSdUy
oH8BJr88SuJjr1rpn0rYk8kBkaDLgjzYp/pXBaTeFK99RTl3Hoo/RtJhPyPa
T94CVGqd7beKcrSBOhrXP9uAvwyDRsMcJFBAThXiOgj15TfTy4q9oOogptBB
nB8t6N9HWKojADeKpT6bvbOSh9Spb6A1zRBPX3UE6mrQkL7mopq9bUSF8Y9b
sAYSz0o8bSSZuv1Y+N0KI3JpvMrULcjddotzNpjlUkesKuDnv/2Q0xQ0EOyE
3zE/JDN9Oy1Z5OplaNtfaqwMtjAra5Ci7uMi9ndqlty717cLPHsfkH5PTbdu
PMY7CEpUsyYyg0f32Hx6z85lcr+Jg99IphAAPHbE5cxvI1CBS5mQrTnVKPiE
DiveTH6s3+0abB8XAfuA/yd+il2xYCBmPMF2K3aORY0oMp1WEoOTBykeLTwd
ZhPwJ3aYS4D6PInje6UhIb9Hj7QrXRyF7QPsk0U9qnFUaOD0JdgSJzvqBgd5
gf8DBPGrlhJQAAA=

-->

</rfc>

