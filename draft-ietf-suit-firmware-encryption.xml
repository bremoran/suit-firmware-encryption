<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-06" category="std">
  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="July" day="11"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF 
SUIT manifest with key establishment provided by hybrid
public-key encryption (HPKE) and AES Key Wrap (AES-KW). HPKE
uses public key cryptography while AES-KW uses a pre-shared 
key-encryption key. Encryption of the firmware image is 
accomplished with convential symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

<t>The main use case of this document is to encrypt firmware. However, SUIT manifests
may require other payloads than firmware images to experience confidentiality
protection using encryption, for example personalization data, configuration data, 
or machine learning models. While the term firmware is used throughout
the document, plaintext other than firmware images may get encrypted using
the described mechanism. Hence, the terms firmware (image) and plaintext are 
used interchangably.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient are defined in <xref target="RFC9180"/> and have 
the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of entity which sends an encrypted message.</t>
  <t>Recipient: Role of entity which receives an encrypted message.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="RFC9180"/>.</t>
</list></t>

</section>
<section anchor="arch" title="Architecture">

<t><xref target="RFC9019"/> describes the architecture for distributing firmware images 
and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images.</t>

<t>This document enhances the SUIT architecture to include firmware encryption.
<xref target="arch-fig"/> shows the distribution system, which represents the firmware server 
and the device management infrastructure. The distribution system is aware 
of the individual devices to which a firmware update has to be delivered.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |(Firmware |   |                               | Firmware +
 | Consumer)|   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |(Firmware |   |                        |              |
 | Consumer)|   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |(Firmware |
 | Consumer)|
 +----------+
]]></artwork></figure>

<t>Firmware encryption requires the sender to know the firmware consumers and the 
respective credentials used by the key distribution mechanism. For AES-KW the 
KEK needs to be known and, in case of HPKE, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this is not<vspace />
likely. The distribution system certainly has the knowledge about the 
recipients to perform firmware encryption.</t>

<t>To offer confidentiality protection for firmware images two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The firmware author acts as the sender and the recipient is the firmware consumer
(or the firmware consumers).</t>
  <t>The firmware author encrypts the firmware image with the distribution system as 
the initial recipient. Then, the distribution system decrypts and re-encrypts the 
firmware image towards the firmware consumer(s). Delegating the task of re-encrypting 
the firmware image to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted firmware images changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the firmware image.</t>
</list></t>

<t>Irrespectively of the two variants, the key distribution data (in form of the 
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the firmware author.</t>

<t>Since the SUIT envelope is not protected cryptographically an adversary could modify
the COSE_Encrypt structure. For example, if the attacker alters the key distribution
data then a recipient will decrypt the firmware image with an incorrect key. This
will lead to expending energy and flash cycles until the failure is detected. To
mitigate this attack, the optional suit-cek-verification parameter is added to the
manifest. Since the manifest is protected by a digital signature (or a MAC), an
adversary cannot successfully modify this value. This parameter allows the recipient
to verify whether the CEK has successfully been derived.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest" title="SUIT Envelope and SUIT Manifest">

<t>This specification introduces two extensions to the SUIT envelope and the manifest 
structure, as motivated in <xref target="arch"/>.</t>

<t>The SUIT envelope is enhanced with a key exchange payload, which is carried inside
the suit-protection-wrappers parameter, see <xref target="envelope-fig"/>. One or multiple 
SUIT_Encryption_Info payload(s) are carried within the suit-protection-wrappers 
parameter. The content of the SUIT_Encryption_Info payload is explained in 
<xref target="AES-KW"/> (for AES-KW) and in <xref target="HPKE"/> (for HPKE). When the encryption capability 
is used, the suit-protection-wrappers parameter MUST be included in the envelope.</t>

<figure title="SUIT Envelope CDDL." anchor="envelope-fig"><artwork><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  suit-protection-wrappers => bstr .cbor {
      *(int/str) => [+ SUIT_Encryption_Info]
  }
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}
]]></artwork></figure>

<t>The manifest is extended with a CEK verification parameter (called 
suit-cek-verification), see <xref target="manifest-fig"/>. This parameter is optional 
and is utilized in environments where battery exhaustion attacks are a 
concern. Details about the CEK verification can be found in 
<xref target="cek-verification"/>.</t>

<figure title="SUIT Manifest CDDL." anchor="manifest-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Parameters //= (suit-parameter-cek-verification => bstr)
]]></artwork></figure>

</section>
<section anchor="AES-KW" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options. We use the following notation KEK(R1,S) is the KEK shared between 
recipient R1 and the sender S. Likewise, CEK(R1,S) is shared between R1 and S. 
If a single CEK or a single KEK is shared with all authorized recipients R by a given sender S 
in a certain context then we use CEK(<spanx style="emph">,S) or KEK(</spanx>,S), respectively. The notation 
ENC(plaintext, key) refers to the encryption of plaintext with a given key.</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK. This means KEK(*,S) ENC(CEK,KEK), and 
ENC(firmware,CEK).</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. In short, 
KEK_1(R1, S),…, KEK_n(Rn, S), ENC(CEK, KEK_i) for i=1 to n, and ENC(firmware,CEK). 
The benefit of this approach is that the firmware image is encrypted only once with 
a CEK while there is no sharing of the KEK accross recipients. Hence, authorized recipients 
still use their individual KEKs to decrypt the CEK and to subsequently obtain the 
plaintext firmware.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. Assume there are KEK_1(R1, S),…, KEK_n(Rn, S), and 
for i=1 to n the following computations need to be made: ENC(CEK_i, KEK_i) and 
ENC(firmware,CEK_i). This approach is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        / protected field with alg=AES-GCM-128 /
        h'A10101', 
        {
           / unprotected field with iv /
           5: h'26682306D4FB28CA01B43B80'
        }, 
        / null because of detached ciphertext /
        null, 
        [ / recipients array /
           h'', / protected field /
           {    / unprotected field /
              1: -3,            / alg=A128KW /
              4: h'6B69642D31'  / key id /
           }, 
           / CEK encrypted with KEK /
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="HPKE" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE SealBase function is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="I-D.ietf-cose-hpke"/> defines the use of HPKE with COSE and provides examples.</t>

</section>
<section anchor="cek-verification" title="CEK Verification">

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK with a nonce of all zeros and empty 
additional data using the cipher algorithm and mode also used to encrypt the
plaintext.</t>

<t>As explained in <xref target="arch"/>, the suit-cek-verification parameter is optional to
implement and optional to use. When used, it reduces the risk of an battery
exhaustion attack against the IoT device.</t>

</section>
<section anchor="ciphers-without-integrity-protection" title="Ciphers without Integrity Protection">

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a larger firmware image into blocks and to encrypt each block individually
using a cipher that does not increase the size of the resulting ciphertext 
(i.e. by not adding an authentication tag after each encrypted block).</t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area. Then, the bootloader starts decrypting 
the downloaded image block-by-block and swaps it with the currently valid 
image. Note that the currently valid image is available in cleartext and hence
it has to be re-encrypted before copying it to the staging area.</t>

<t>This approach of swapping the newly downloaded image with the previously valid 
image is often referred as A/B approach.  A/B refers to the two storage areas,
sometimes called slots, involved. Two slots are used to allow the update to be
reversed in case the newly obtained firmware image fails to boot. This approach
adds robustness to the firmware update procedure.</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the blocks, the bootloader can restart where it left off. This
technique again offers robustness.</t>

<t>To accomplish this functionality, ciphers without integrity protection are used
to encrypt the firmware image. Integrity protection for the firmware image is,
however, important and therefore the image digest defined in 
<xref target="I-D.ietf-suit-manifest"/> MUST be used.</t>

<t>This document registers several cipher algorithms for use with firmware encryption
that do not offer integrity protection. These ciphers are registered within
the COSE algorithm registry but are dedicated for this specific applications only. 
Hence, all algorithms listed in <xref target="iana-algo"/> are not recommended for general
use.</t>

<figure title="Algorithms for the COSE Algorithm Registry" anchor="iana-algo"><artwork><![CDATA[
   +===========+=====+===========+==============+=========+============+
   | Name      |Value|Description| Capabilities |Reference|Recommended |
   +===========+=====+===========+==============+=========+============+
   |AES-128-CBC|  35 | AES 128   | []           | [This   |No          |
   |           |     | CBC Mode  |              |Document]|            |
   |           |     |           |              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-256-CBC|  36 | AES 256   | []           | [This   |No          |
   |           |     | CBC Mode  |              |Document]|            |
   |           |     |           |              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-128-CTR|  37 | AES 128   | []           | [This   |No          |
   |           |     | Counter   |              |Document]|            |
   |           |     | Mode (CTR)|              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-256-CTR|  38 | AES 256   | []           | [This   |No          |
   |           |     | Counter   |              |Document]|            |
   |           |     | Mode (CTR)|              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
]]></artwork></figure>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>[[Editor’s Note: Add examples for a complete manifest here (including a digital signature), 
multiple recipients, encryption of manifests (in comparison to firmware images).]]</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document asks IANA to register new values into the COSE algorithm
registry. The values are listed in <xref target="iana-algo"/>.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC3394' target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2002'/>
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180' target='https://www.rfc-editor.org/info/rfc9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg'>
	 <organization>Inria</organization>
      </author>
      <date day='28' month='April' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-17'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-17.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hpke'>
   <front>
      <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This specification defines hybrid public-key encryption (HPKE) for
   use with CBOR Object Signing and Encryption (COSE).  HPKE offers a
   variant of public-key encryption of arbitrary-sized plaintexts for a
   recipient public key.

   HPKE works for any combination of an asymmetric key encapsulation
   mechanism (KEM), key derivation function (KDF), and authenticated
   encryption with additional data (AEAD) encryption function.
   Authentication for HPKE in COSE is provided by COSE-native security
   mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hpke-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hpke-02.txt' type='TXT'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference anchor='RFC4949' target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author fullname='R. Shirey' initials='R.' surname='Shirey'><organization/></author>
<date month='August' year='2007'/>
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
KXyEQXS1m4OSa5vnaDZMNL317ZV4BqHwM1m7ZYlvscsUSf6CWR4/v/sgFwto
/lI8HXZ63ZOD0tvDSmto9pmKuBCgcmLZAiVe/qvAEhfRmU1hvdR9VGrZciM4
gq3pY3mEWtOTWwxYYU2De3f3RqG1kfsR65BUHvyz9c1+Ak1avIAXh9ji9+e1
2/4RW3/Fj5/4PRZ0gE4CXrp7bxih/u2Eso2wvVvT4C9/KSP+0nG1aYDwWGAB
8V8D9y7kEevilWXLeDJ5bZy6DxVhTeIj8tyM8nGPIjhARUueS63KOLQ8a4e3
PFuR1vDD6R4OxSE5gyaj/LRGT+hBZ2lClX+momMKmktlKGeWEswvKoPg9Dzx
NyafgU3B0UnQrK3K7p01VWU0sml1OSZe65nCyeWXlkxKZIqdyYm0f7BZvVZd
wxx8aMxKtY05DA03sLthWyx8DIYS4aBVXhhTW9P737h/pigDCnNsMl3qXUBv
07bKN8wud2PK2YZtfknyaivz2hGuY7oS4RLF0fv3dvtz8eLFS3HA/Ggf7pof
ntIdmYdkVSJztzEBmT8t57E/PzVS2LJAfZZbxos0Az5YsSEVpMLq8hWU9QJh
7HQ+Zzh9vhfsQmiRrmJMWmL5V8ElM3szEWgBEhf+UJr9gzFrXZ0a2gCcQ6Gc
qImVUOTbVA/SWm6Nd97rd/qdHuo1k9A77iO70rje/ULmQdvU63Fh7em/33m7
19kUAguFF6jrjZ/rs25BRYqFzq+idrDAjpBA2VM/S8nB+fuuZd/yCXwrAvya
jAcCaGTN5xTut+pcbHYKOjvzw4dMWlynIKjUGtPcyprYmBXnzEk5lwaGLqMF
wDi46bVuD220AuNaZvdtTUMQnRE3PWfUmbjHbUe81vfqUeew7nE4XGUY0/UW
l309R5wCJDGjh4xy8/tn2nTbm4kSXJP6OqIbtvMXYD0nDiK0UtAzMsEnJvtP
BTtMj4wPhPQnBBSm/tl8xwor7/8yeThMNRuXb8cHLlnfQm44FCTsAss8LPb0
iX3DWQwl+VxcHINo2Ls0iueVy7gA0JZHlKW/OkYoEWCJoYxOxLRv7lYucG3w
smWym1SPg88sUbZQRHQc1FUwfdkLhj1ajGlHqXvBzA3JOtsQ442Uyi9RhzE5
O+JSAj/uXzQp4n1854JjFJihoqZ1ptE9nZtYXBAOu04w25cVLY703vWQqgVQ
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
FamSo2AAAA==

-->

</rfc>

