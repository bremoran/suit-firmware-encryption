<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-04" category="std">
  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="July" day="08"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF 
SUIT manifest with key establishment provided by hybrid
public-key encryption (HPKE) and AES Key Wrap (AES-KW). HPKE
uses public key cryptography while AES-KW uses a pre-shared 
key-encryption key. Encryption of the firmware image is 
accomplished with convential symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient are defined in <xref target="RFC9180"/> and have 
the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of entity which sends an encrypted message.</t>
  <t>Recipient: Role of entity which receives an encrypted message.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="RFC9180"/>.</t>
</list></t>

<t>The main use case of this document is to encrypt firmware. However, SUIT manifests
may require other payloads than firmware images to experience confidentiality
protection using encryption. While the term firmware is used throughout
the document, plaintext other than firmware images may get encrypted using
the described mechanism. Hence, the terms firmware (image) and plaintext are 
used interchangably.</t>

</section>
<section anchor="arch" title="Architecture">

<t><xref target="RFC9019"/> describes the architecture for distributing firmware images 
and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images.</t>

<t>This document enhances the SUIT architecutre to include firmware encryption.
<xref target="arch-fig"/> shows the distribution system, which represents the firmware server 
and the device management infrastructure. The distribution system is aware 
of the individual devices to which a firmware update has to be delivered.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |(Firmware |   |                               | Firmware +
 | Consumer)|   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |(Firmware |   |                        |              |
 | Consumer)|   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |(Firmware |
 | Consumer)|
 +----------+
]]></artwork></figure>

<t>Firmware encryption requires the sender to know the firmware consumers and the 
respective credentials used by the key distribution mechanism. For AES-KW the 
KEK needs to be known and, in case of HPKE, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this will not be 
likely. The distribution system certainly has the knowledge about the 
recipients to perform firmware encryption.</t>

<t>To offer confidentiality protection for firmware images two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The firmware author acts as the sender and the recipient is the firmware consumer
(or the firmware consumers).</t>
  <t>The firmware author encrypts the firmware image with the distribution system as 
the initial recipient. Then, the distribution system decrypts and re-encrypts the 
firmware image towards the firmware consumer(s). Delegating the task of re-encrypting 
the firmware image to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted  firmware images changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the firmware image.</t>
</list></t>

<t>Irrespectively of the two variants, the key distribution data (in form of the 
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the firmware author.</t>

<t>Since the SUIT envelope is not protected cryptographically an adversary could modify
the COSE_Encrypt structure. For example, if the attacker alters the key distribution
data then a recipient will decrypt the firmware image with an incorrect key. This
will lead to expending energy and flash cycles until the failure is detected. To
mitigate this attack, the optional suit-cek-verification parameter is added to the
manifest. Since the manifest is protected by a digital signature (or a MAC), an
adversary cannot successfully modify this value. This parameter allows the recipient
to verify whether the CEK has successfully been derived.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest" title="SUIT Envelope and SUIT Manifest">

<t>This specification introduces two extensions to the SUIT envelope and the manifest 
structure, as motivated in <xref target="arch"/>.</t>

<t>The SUIT envelope is enhanced with a key exchange payload, which is carried inside
the suit-protection-wrappers parameter, see <xref target="envelope-fig"/>. One or multiple 
SUIT_Encryption_Info payload(s) are carried within the suit-protection-wrappers 
parameter. The content of the SUIT_Encryption_Info payload is explained in 
<xref target="AES-KW"/> (for AES-KW) and in <xref target="HPKE"/> (for HPKE). When the encryption capability 
is used, the suit-protection-wrappers parameter MUST be included in the envelope.</t>

<figure title="SUIT Envelope CDDL." anchor="envelope-fig"><artwork><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  suit-protection-wrappers => bstr .cbor {
      *(int/str) => [+ SUIT_Encryption_Info]
  }
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}
]]></artwork></figure>

<t>The manifest is extended with a CEK verification parameter (called 
suit-cek-verification), see <xref target="manifest-fig"/>. This parameter is optional 
and is utilized in environments where battery exhaustion attacks are a 
concern. Details about the CEK verification can be found in 
<xref target="cek-verification"/>.</t>

<figure title="SUIT Manifest CDDL." anchor="manifest-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    ? suit-cek-verification       => bstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}
]]></artwork></figure>

</section>
<section anchor="AES-KW" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options. We use the following notation KEK(R1,S) is the KEK shared between 
recipient R1 and the sender S. Likewise, CEK(R1,S) is shared between R1 and S. 
If a single CEK or a single KEK is shared with all authorized recipients R by a given sender S 
in a certain context then we use CEK(<spanx style="emph">,S) or KEK(</spanx>,S), respectively. The notation 
ENC(plaintext, key) refers to the encryption of plaintext with a given key.</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK. This means KEK(*,S) ENC(CEK,KEK), and 
ENC(firmware,CEK).</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. In short, 
KEK_1(R1, S),…, KEK_n(Rn, S), ENC(CEK, KEK_i) for i=1 to n, and ENC(firmware,CEK). 
The benefit of this approach is that the firmware image is encrypted only once with 
a CEK while there is no sharing of the KEK accross recipients. Hence, authorized recipients 
still use their individual KEKs to decrypt the CEK and to subsequently obtain the 
plaintext firmware.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. Assume there are KEK_1(R1, S),…, KEK_n(Rn, S), and 
for i=1 to n the following computations need to be made: ENC(CEK_i, KEK_i) and 
ENC(firmware,CEK_i). This approach is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        / protected field with alg=AES-GCM-128 /
        h'A10101', 
        {
           / unprotected field with iv /
           5: h'26682306D4FB28CA01B43B80'
        }, 
        / null because of detached ciphertext /
        null, 
        [ / recipients array /
           h'', / protected field /
           {    / unprotected field /
              1: -3,            / alg=A128KW /
              4: h'6B69642D31'  / key id /
           }, 
           / CEK encrypted with KEK /
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="HPKE" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE SealBase function is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="I-D.ietf-cose-hpke"/> defines the use of HPKE with COSE.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is 
shown in <xref target="hpke-example"/>. It uses the following algorithm 
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of the (detached) firmware image.</t>
  <t>AES-GCM-128 for encryption of the CEK as well as ECDH
with NIST P-256 and HKDF-SHA256 as a Key Encapsulation Mechanism (KEM).</t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96_0([
    / protected header with alg=AES-GCM-128 /
    h'a10101',
    / unprotected header with nonce /
    {5: h'938b528516193cc7123ff037809f4c2a'},
    / detached ciphertext /
    null,
    / recipient structure /
    [
        / protected field with alg for HPKE /
        h'a1013863',
        / unprotected header /
        {
            / ephemeral public key with x / y coodinate /
            -1: h'a401022001215820a596f2ca8d159c04942308ca90
                  cfbfca65b108ca127df8fe191a063d00d7c5172258
                  20aef47a45d6d6c572e7bd1b9f3e69b50ad3875c68
                  f6da0caaa90c675df4162c39',
             /  kid for recipient static ECDH public key /
             4: h'6b69642d32',
        },
        / encrypted CEK /
        h'9aba6fa44e9b2cef9d646614dcda670dbdb31a3b9d37c7a
          65b099a8152533062',
    ],
])
]]></artwork></figure>

</section>
<section anchor="cek-verification" title="CEK Verification">

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK with a nonce of all zeros and empty 
additional data using the cipher algorithm and mode also used to encrypt the
plaintext.</t>

<t>As explained in <xref target="arch"/>, the suit-cek-verification parameter is optional to
implement and optional to use. When used, it reduces the risk of an battery
exhaustion attack against the IoT device.</t>

</section>
<section anchor="ciphers-without-integrity-protection" title="Ciphers without Integrity Protection">

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a larger firmware image into blocks and to encrypt each block individually
using a cipher that does not increase the size of the resulting ciphertext 
(i.e. by not adding an authentication tag after each encrypted block).</t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area. Then, the bootloader starts decrypting 
the downloaded image block-by-block and swaps it with the currently valid 
image. Note that the currently valid image is available in cleartext and hence
it has to be re-encrypted before copying it to the staging area.</t>

<t>This approach of swapping the newly downloaded image with the previously valid 
image is often referred as A/B approach.  A/B refers to the two storage areas,
sometimes called slots, involved. Two slots are used to allow the update to be
reversed in case the newly obtained firmware image fails to boot. This approach
adds robustness to the firmware update procedure.</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the blocks, the bootloader can restart where it left off. This
technique again offers robustness.</t>

<t>To accomplish this functionality, ciphers without integrity protection are used
to encrypt the firmware image. Integrity protection for the firmware image is,
however, important and therefore the image digest defined in 
<xref target="I-D.ietf-suit-manifest"/> MUST be used.</t>

<t>This document registers several cipher algorithms for use with firmware encryption
that do not offer integrity protection. These ciphers are registered within
the COSE algorithm registry but are dedicated for this specific applications only. 
Hence, all algorithms listed in <xref target="iana-algo"/> are not recommended for general
use.</t>

<figure title="Algorithms for the COSE Algorithm Registry" anchor="iana-algo"><artwork><![CDATA[
   +===========+=====+===========+==============+=========+============+
   | Name      |Value|Description| Capabilities |Reference|Recommended |
   +===========+=====+===========+==============+=========+============+
   |AES-128-CBC|  35 | AES 128   | []           | [This   |No          |
   |           |     | CBC Mode  |              |Document]|            |
   |           |     |           |              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-256-CBC|  36 | AES 256   | []           | [This   |No          |
   |           |     | CBC Mode  |              |Document]|            |
   |           |     |           |              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-128-CTR|  37 | AES 128   | []           | [This   |No          |
   |           |     | Counter   |              |Document]|            |
   |           |     | Mode (CTR)|              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
   |AES-256-CTR|  38 | AES 256   | []           | [This   |No          |
   |           |     | Counter   |              |Document]|            |
   |           |     | Mode (CTR)|              |         |            |
   +-----------+-----+-----------+--------------+---------+------------+
]]></artwork></figure>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>[[Editor’s Note: Add examples for a complete manifest here (including a digital signature), 
multiple recipients, encryption of manifests (in comparison to firmware images).]]</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document asks IANA to register new values into the COSE algorithm
registry. The values are listed in <xref target="iana-algo"/>.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC3394' target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2002'/>
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180' target='https://www.rfc-editor.org/info/rfc9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg'>
	 <organization>Inria</organization>
      </author>
      <date day='28' month='April' year='2022'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-17'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-17.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hpke'>
   <front>
      <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification defines hybrid public-key encryption (HPKE) for
   use with CBOR Object Signing and Encryption (COSE).  HPKE offers a
   variant of public-key encryption of arbitrary-sized plaintexts for a
   recipient public key.

   HPKE works for any combination of an asymmetric key encapsulation
   mechanism (KEM), key derivation function (KDF), and authenticated
   encryption with additional data (AEAD) encryption function.
   Authentication for HPKE in COSE is provided by COSE-native security
   mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hpke-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hpke-01.txt' type='TXT'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference anchor='RFC4949' target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author fullname='R. Shirey' initials='R.' surname='Shirey'><organization/></author>
<date month='August' year='2007'/>
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
mNTqLWUAAA==

-->

</rfc>

