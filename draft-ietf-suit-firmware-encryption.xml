<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-04" category="std">
  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2022" month="April" day="15"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF
SUIT manifest with key establishment provided by the hybrid
public-key encryption (HPKE) scheme and the AES Key Wrap (AES-KW)
with a pre-shared key-encryption key. Encryption of the firmware
image is accomplished using the established content encryption
key and a mutually agreed symmetric encryption algorithm, such
as AES-GCM or AES-CCM.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient are defined in <xref target="RFC9180"/> and have 
the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of entity which sends an encrypted message.</t>
  <t>Recipient: Role of entity which receives an encrypted message.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="RFC9180"/>.</t>
</list></t>

<t>The main use case of this document is to encrypt firmware. However, SUIT manifests
may require other payloads than firmware images to experience confidentiality
protection using encryption. While the term firmware is used throughout
the document, plaintext other than firmware images may get encrypted using
the described mechanism. Hence, the terms firmware (image) and plaintext are 
used interchangably.</t>

</section>
<section anchor="arch" title="Architecture">

<t><xref target="RFC9019"/> describes the architecture for distributing firmware images 
and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images.</t>

<t>This document enhances the SUIT architecutre to include firmware encryption.
<xref target="arch-fig"/> shows the distribution system, which represents the firmware server 
and the device management infrastructure. The distribution system is aware 
of the individual devices to which a firmware update has to be delivered.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |(Firmware |   |                               | Firmware +
 | Consumer)|   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |(Firmware |   |                        |              |
 | Consumer)|   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |(Firmware |
 | Consumer)|
 +----------+
]]></artwork></figure>

<t>Firmware encryption requires the sender to know the firmware consumers and the 
respective credentials used by the key distribution mechanism. For AES-KW the 
KEK needs to be known and, in case of HPKE, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this will not be 
likely. The distribution system certainly has the knowledge about the 
recipients to perform firmware encryption.</t>

<t>To offer confidentiality protection for firmware images two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The firmware author acts as the sender and the recipient is the firmware consumer
(or the firmware consumers).</t>
  <t>The firmware author encrypts the firmware image with the distribution system as 
the initial recipient. Then, the distribution system decrypts and re-encrypts the 
firmware image towards the firmware consumer(s). Delegating the task of re-encrypting 
the firmware image to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted  firmware images changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the firmware image.</t>
</list></t>

<t>Irrespectively of the two variants, the key distribution data (in form of the 
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the firmware author.</t>

<t>Since the SUIT envelope is not protected cryptographically an adversary could modify
the COSE_Encrypt structure. For example, if the attacker alters the key distribution
data then a recipient will decrypt the firmware image with an incorrect key. This
will lead to expending energy and flash cycles until the failure is detected. To
mitigate this attack, the optional suit-cek-verification parameter is added to the
manifest. Since the manifest is protected by a digital signature (or a MAC), an
adversary cannot successfully modify this value. This parameter allows the recipient
to verify whether the CEK has successfully been derived.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest" title="SUIT Envelope and SUIT Manifest">

<t>This specification introduces two extensions to the SUIT envelope and the manifest 
structure, as motivated in <xref target="arch"/>.</t>

<t>The SUIT envelope is enhanced with a key exchange payload, which is carried inside
the suit-protection-wrappers parameter, see <xref target="envelope-fig"/>. One or multiple 
SUIT_Encryption_Info payload(s) are carried within the suit-protection-wrappers 
parameter. The content of the SUIT_Encryption_Info payload is explained in 
<xref target="AES-KW"/> (for AES-KW) and in <xref target="HPKE"/> (for HPKE). When the encryption capability 
is used, the suit-protection-wrappers parameter MUST be included in the envelope.</t>

<figure title="SUIT Envelope CDDL." anchor="envelope-fig"><artwork><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  suit-protection-wrappers => bstr .cbor {
      *(int/str) => [+ SUIT_Encryption_Info]
  }
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}
]]></artwork></figure>

<t>The manifest is extended with a CEK verification parameter (called 
suit-cek-verification), see <xref target="manifest-fig"/>. This parameter is optional 
and is utilized in environments where battery exhaustion attacks are a 
concern. Details about the CEK verification can be found in 
<xref target="cek-verification"/>.</t>

<figure title="SUIT Manifest CDDL." anchor="manifest-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    ? suit-cek-verification       => bstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}
]]></artwork></figure>

</section>
<section anchor="AES-KW" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options. We use the following notation KEK(R1,S) is the KEK shared between 
recipient R1 and the sender S. Likewise, CEK(R1,S) is shared between R1 and S. 
If a single CEK or a single KEK is shared with all authorized recipients R by a given sender S 
in a certain context then we use CEK(<spanx style="emph">,S) or KEK(</spanx>,S), respectively. The notation 
ENC(plaintext, key) refers to the encryption of plaintext with a given key.</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK. This means KEK(*,S) ENC(CEK,KEK), and 
ENC(firmware,CEK).</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. In short, 
KEK_1(R1, S),…, KEK_n(Rn, S), ENC(CEK, KEK_i) for i=1 to n, and ENC(firmware,CEK). 
The benefit of this approach is that the firmware image is encrypted only once with 
a CEK while there is no sharing of the KEK accross recipients. Hence, authorized recipients 
still use their individual KEKs to decrypt the CEK and to subsequently obtain the 
plaintext firmware.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. Assume there are KEK_1(R1, S),…, KEK_n(Rn, S), and 
for i=1 to n the following computations need to be made: ENC(CEK_i, KEK_i) and 
ENC(firmware,CEK_i). This approach is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        / protected field with alg=AES-GCM-128 /
        h'A10101', 
        {
           / unprotected field with iv /
           5: h'26682306D4FB28CA01B43B80'
        }, 
        / null because of detached ciphertext /
        null, 
        [ / recipients array /
           h'', / protected field /
           {    / unprotected field /
              1: -3,            / alg=A128KW /
              4: h'6B69642D31'  / key id /
           }, 
           / CEK encrypted with KEK /
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="HPKE" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="RFC9180"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE SealBase function is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="I-D.ietf-cose-hpke"/> defines the use of HPKE with COSE.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is 
shown in <xref target="hpke-example"/>. It uses the following algorithm 
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of the (detached) firmware image.</t>
  <t>AES-GCM-128 for encryption of the CEK as well as ECDH
with NIST P-256 and HKDF-SHA256 as a Key Encapsulation Mechanism (KEM).</t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96_0([
    / protected header with alg=AES-GCM-128 /
    h'a10101',
    / unprotected header with nonce /
    {5: h'938b528516193cc7123ff037809f4c2a'},
    / detached ciphertext /
    null,
    / recipient structure /
    [
        / protected field with alg for HPKE /
        h'a1013863',
        / unprotected header /
        {
            / ephemeral public key with x / y coodinate /
            -1: h'a401022001215820a596f2ca8d159c04942308ca90
                  cfbfca65b108ca127df8fe191a063d00d7c5172258
                  20aef47a45d6d6c572e7bd1b9f3e69b50ad3875c68
                  f6da0caaa90c675df4162c39',
             /  kid for recipient static ECDH public key /
             4: h'6b69642d32',
        },
        / encrypted CEK /
        h'9aba6fa44e9b2cef9d646614dcda670dbdb31a3b9d37c7a
          65b099a8152533062',
    ],
])
]]></artwork></figure>

</section>
<section anchor="cek-verification" title="CEK Verification">

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK with a nonce of all zeros and empty 
additional data using the cipher algorithm and mode also used to encrypt the
plaintext.</t>

<t>As explained in <xref target="arch"/>, the suit-cek-verification parameter is optional to
implement and optional to use. When used, it reduces the risk of an battery
exhaustion attack against the IoT device.</t>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>[[Editor’s Note: Add examples for a complete manifest here (including a digital signature), 
multiple recipients, encryption of manifests (in comparison to firmware images).]]</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC3394' target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2002'/>
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>



<reference anchor='RFC9180' target='https://www.rfc-editor.org/info/rfc9180'>
<front>
<title>Hybrid Public Key Encryption</title>
<author fullname='R. Barnes' initials='R.' surname='Barnes'><organization/></author>
<author fullname='K. Bhargavan' initials='K.' surname='Bhargavan'><organization/></author>
<author fullname='B. Lipp' initials='B.' surname='Lipp'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='February' year='2022'/>
<abstract><t>This document describes a scheme for hybrid public key encryption (HPKE). This scheme provides a variant of public key encryption of arbitrary-sized plaintexts for a recipient public key. It also includes three authenticated variants, including one that authenticates possession of a pre-shared key and two optional ones that authenticate possession of a key encapsulation mechanism (KEM) private key. HPKE works for any combination of an asymmetric KEM, key derivation function (KDF), and authenticated encryption with additional data (AEAD) encryption function. Some authenticated variants may not be supported by all KEMs. We provide instantiations of the scheme using widely used and efficient primitives, such as Elliptic Curve Diffie-Hellman (ECDH) key agreement, HMAC-based key derivation function (HKDF), and SHA2.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='9180'/>
<seriesInfo name='DOI' value='10.17487/RFC9180'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz'>
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg'>
	 <organization>Inria</organization>
      </author>
      <date day='25' month='October' year='2021'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-16'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-suit-manifest-16.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-cose-hpke'>
   <front>
      <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
      <author fullname='Hannes Tschofenig'>
	 <organization>Arm Limited</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Brendan Moran'>
	 <organization>Arm Limited</organization>
      </author>
      <date day='7' month='March' year='2022'/>
      <abstract>
	 <t>   This specification defines hybrid public-key encryption (HPKE) for
   use with CBOR Object Signing and Encryption (COSE).  HPKE offers a
   variant of public-key encryption of arbitrary-sized plaintexts for a
   recipient public key.

   HPKE works for any combination of an asymmetric key encapsulation
   mechanism (KEM), key derivation function (KDF), and authenticated
   encryption with additional data (AEAD) encryption function.
   Authentication for HPKE in COSE is provided by COSE-native security
   mechanisms.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-hpke-01'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-cose-hpke-01.txt' type='TXT'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC9019' target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124' target='https://www.rfc-editor.org/info/rfc9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC8937' target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630' target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference anchor='RFC4949' target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author fullname='R. Shirey' initials='R.' surname='Shirey'><organization/></author>
<date month='August' year='2007'/>
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAO91WWIAA61ce2/bSJL/34C/QyNZXOyJpOj98CJ3K0vy2Uic5OLMDA6z
gdEiW1LDFKkjKduajPezX1X1kxTlJIfzABlJ7Ed1dVX1rx7Ner1+fJTLPBJn
7EKm6weeCjaLg3S3yWUSsweZr9jNr1df2DWP5UJkeXZ8xOfzVNxXdjg+CpMg
5msYLkz5Iq9LkS/q2Vbm9YVuXRe2db3ZPT4KeC6WSbo7Y1keHh8dH8lNesY2
qeh1BsMv6TbL283mqNmGeVPBz9iNCLapzHfHRw9JerdMk+3mjEg8ProTO/gt
PGNXcS7SWOT1KRKBg2Y5j8NbHiUxkLYTsIqNPDs+YixdBCLM8l1kfmcsTwL/
s4xDEef2lyxJ81QsMvfDbl38nqcycO2DZL2G/u65jCMZe7OJx7weySyvw0Dz
JIKG9eSX1/gIeLnmm42Mlz49t5G4F9isiwvj23yVpLiUOj6nPxnD08sG+5IF
q2QhYrm0j9TeXPI4FlnV8yRdwkb/yXF7ztg4XbP3ci1zEdoWYs1ldMZWNEQj
t0P8g6frBiwWiSrT8rnBLpNtFoldiZDP2yzbe1Sk4Te5lJHd9Rp7/35iWxpJ
LLbZI1WN/497bJWJYJ9KIvK8wa6TlMfmR0XheSrikMfFR9/lkp5Zd25QZ59B
x0dxkq6h/70gKfx8MWm3WiPzudMZdc3nYavXdp8H3ao2o9awSZ+v6tOGU7m1
1tnioyDJRH21ucOZQdviRZmSUdNRMmq1HSWjzsBS2+80zefuqKvaHx/V63XY
FNAAHpDafVnJDMV4iyrAso0I5EKC5HFmzAHbbkKwAGwtAhApma3Zw0rAz/lK
HB/ZRnLNl/BvxrTxEGGDOfvjLArbZjA69GVXsy8Xx0dkugwblDUDI8HgC5+D
zq2IrE2a3MtQhGy+o66r3TyVsJWbLbQJ6tTBzXBy+end7JSB3Iu1YGBVqM94
dsPeQcPfU75hJ/Ct/u73UzBROCNHa1bPVkBqiNN7FhC/NnyDmyxoOLNw2B+z
ch6A7GyQaBhlm4FRoJZ2KfBrkIDdgwUJzx4j9UgkZ+ttvuVRBF+XqYDWYG7W
Am2VvzoegS0Gotc1lm2DFdiXDNdW/8/JNUg9fZxMrhu4t7jXaxmGkcBvLxla
3TQJt4Ga+Pjot20Ui5TPZSRz3HRihjHNuFKQjniZsZOr5MspC8W9DKDVit8L
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

-->

</rfc>

