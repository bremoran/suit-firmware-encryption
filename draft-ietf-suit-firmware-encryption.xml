<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.3.24 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc rfcedstyle="yes"?>
<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-02" category="std">

  <front>
    <title abbrev="Firmware Encryption">Firmware Encryption with SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
      <address>
        <email>hannes.tschofenig@arm.com</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>

    <date year="2021" month="October" day="22"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies a firmware update mechanism where the
firmware image is encrypted.  Firmware encryption uses the IETF 
SUIT manifest with key establishment provided by the hybrid
public-key encryption (HPKE) scheme and the AES Key Wrap (AES-KW) 
with a pre-shared key-encryption key. Encryption of the firmware
image is encrypted using AES-GCM or AES-CCM.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="I-D.ietf-suit-information-model"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key. This symmetric cryptographic key is established for encryption 
and decryption, and that key can be applied to a SUIT manifest, firmware images, 
or personalization data, depending on the encryption choices of the firmware author.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>hybrid public-key encryption (HPKE), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>The document also contains a number of examples.</t>

</section>
<section anchor="conventions-and-terminology" title="Conventions and Terminology">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="I-D.ietf-suit-information-model"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient are defined in <xref target="I-D.irtf-cfrg-hpke"/> and have 
the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of entity which sends an encrypted message.</t>
  <t>Recipient: Role of entity which receives an encrypted message.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in RFC 3394 <xref target="RFC3394"/> for use with AES.</t>
  <t>Key-encryption key (KEK), a term defined in RFC 4949 <xref target="RFC4949"/>.</t>
  <t>Content-encryption key (CEK), a term defined in RFC 2630 <xref target="RFC2630"/>.</t>
  <t>Hybrid Public Key Encryption (HPKE), defined in <xref target="I-D.irtf-cfrg-hpke"/>.</t>
</list></t>

</section>
<section anchor="arch" title="Architecture">

<t><xref target="RFC9019"/> describes the architecture for distributing firmware images 
and manifests from the author to the firmware consumer. It does, however,
not detail the use of encrypted firmware images.</t>

<t>This document enhances the SUIT architecutre to include firmware encryption.
<xref target="arch-fig"/> shows the distribution system, which represents the firmware server 
and the device management infrastructure. The distribution system is aware 
of the individual devices to which a firmware update has to be delivered.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |(Firmware |   |                               | Firmware +
 | Consumer)|   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |(Firmware |   |                        |              |
 | Consumer)|   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |(Firmware |
 | Consumer)|
 +----------+
]]></artwork></figure>

<t>Firmware encryption requires the sender to know the firmware consumers and the 
respective credentials used by the key distribution mechanism. For AES-KW the 
KEK needs to be known and, in case of HPKE, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>The firmware author may have knowledge about all devices that need 
to receive an encrypted firmware image but in most cases this will not be 
likely. The distribution system certainly has the knowledge about the 
recipients to perform firmware encryption.</t>

<t>To offer confidentiality protection for firmware images two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The firmware author acts as the sender and the recipient is the firmware consumer
(or the firmware consumers).</t>
  <t>The firmware author encrypts the firmware image with the distribution system as 
the initial recipient. Then, the distribution system decrypts and re-encrypts the 
firmware image towards the firmware consumer(s). Delegating the task of re-encrypting 
the firmware image to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted  firmware images changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the firmware image.</t>
</list></t>

<t>Irrespectively of the two variants, the key distribution data (in form of the 
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the firmware author.</t>

<t>Since the SUIT envelope is not protected cryptographically an adversary could modify
the COSE_Encrypt structure. For example, if the attacker alters the key distribution
data then a recipient will decrypt the firmware image with an incorrect key. This
will lead to expending energy and flash cycles until the failure is detected. To
mitigate this attack, the optional suit-cek-verification parameter is added to the
manifest. Since the manifest is protected by a digital signature (or a MAC), an
adversary cannot successfully modify this value. This parameter allows the recipient
to verify whether the CEK has successfully been derived.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest" title="SUIT Envelope and SUIT Manifest">

<t>This specification introduces two extensions to the SUIT envelope and the manifest 
structure, as motivated in <xref target="arch"/>.</t>

<t>The SUIT envelope is enhanced with a key exchange payload, which is carried inside
the suit-protection-wrappers parameter, see <xref target="envelope-fig"/>. One or multiple 
SUIT_Encryption_Info payload(s) are carried within the suit-protection-wrappers 
parameter. The content of the SUIT_Encryption_Info payload is explained in 
<xref target="AES-KW"/> (for AES-KW) and in <xref target="HPKE"/> (for HPKE). When the encryption capability 
is used, the suit-protection-wrappers parameter MUST be included in the envelope.</t>

<figure title="SUIT Envelope CDDL." anchor="envelope-fig"><artwork><![CDATA[
SUIT_Envelope_Tagged = #6.107(SUIT_Envelope)
SUIT_Envelope = {
  suit-authentication-wrapper => bstr .cbor SUIT_Authentication,
  suit-manifest  => bstr .cbor SUIT_Manifest,
  SUIT_Severable_Manifest_Members,
  suit-protection-wrappers => bstr .cbor {
      *(int/str) => [+ SUIT_Encryption_Info]
  }
  * SUIT_Integrated_Payload,
  * SUIT_Integrated_Dependency,
  * $$SUIT_Envelope_Extensions,
  * (int => bstr)
}
]]></artwork></figure>

<t>The manifest is extended with a CEK verification parameter (called 
suit-cek-verification), see <xref target="manifest-fig"/>. This parameter is optional 
and is utilized in environments where battery exhaustion attacks are a 
concern. Details about the CEK verification can be found in 
<xref target="cek-verification"/>.</t>

<figure title="SUIT Manifest CDDL." anchor="manifest-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    ? suit-cek-verification       => bstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}
]]></artwork></figure>

</section>
<section anchor="AES-KW" title="AES Key Wrap">

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 12.2.1 of <xref target="RFC8152"/>.  The encrypted CEK is
carried in the COSE_recipient structure alongside the information needed for 
AES-KW. The COSE_recipient structure, which is a substructure of the 
COSE_Encrypt structure, contains the CEK encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options. We use the following notation KEK(R1,S) is the KEK shared between 
recipient R1 and the sender S. Likewise, CEK(R1,S) is shared between R1 and S. 
If a single CEK or a single KEK is shared with all authorized recipients R by a given sender S 
in a certain context then we use CEK(<spanx style="emph">,S) or KEK(</spanx>,S), respectively. The notation 
ENC(plaintext, key) refers to the encryption of plaintext with a given key.</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK. This means KEK(*,S) ENC(CEK,KEK), and 
ENC(firmware,CEK).</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. In short, 
KEK_1(R1, S),…, KEK_n(Rn, S), ENC(CEK, KEK_i) for all i=1 to n, and ENC(firmware,CEK). 
The benefit of this approach is that the firmware image is encrypted only once with 
a CEK while there is no sharing of the KEK accross recipients. Hence, authorized recipients 
still use their individual KEKs to decrypt the CEK and to subsequently obtain the 
plaintext firmware.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. Assume there are KEK_1(R1, S),…, KEK_n(Rn, S), and 
for all i=1 to n the following computations need to be made: ENC(CEK_i, KEK_i) and 
ENC(firmware,CEK_i). This approach is appropriate when no benefits can be gained
from encrypting and transmitting firmware images only once. For example, 
firmware images may contain information unique to a device instance.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the firmware image, 
which includes information like the algorithm and the IV, even though the 
firmware image is not embedded in the COSE_Encrypt.ciphertext itself since 
it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The ‘protected’ field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: “aaaaaaaaaaaaaaaa”</t>
  <t>KID: “kid-1”</t>
  <t>Plaintext Firmware: “This is a real firmware image.”</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a dignostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        // protected field with alg=AES-GCM-128
        h'A10101', 
        {
           // unprotected field with iv
           5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null, 
        [ // recipients array
           h'', // protected field
           {    // unprotected field
              1: -3,            // alg=A128KW 
              4: h'6B69642D31'  // key id
           }, 
           // CEK encrypted with KEK
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was “4C805F1587D624ED5E0DBB7A7F7FA7EB” and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="HPKE" title="Hybrid Public-Key Encryption (HPKE)">

<t>Hybrid public-key encryption (HPKE) <xref target="I-D.irtf-cfrg-hpke"/> is a scheme that 
provides public key encryption of arbitrary-sized plaintexts given a 
recipient’s public key.</t>

<t>For use with firmware encryption the scheme works as follows: HPKE, 
which internally utilizes a non-interactive ephemeral-static
Diffie-Hellman exchange to derive a shared secret, is used to 
encrypt a CEK. This CEK is subsequently used to encrypt the firmware image. 
Hence, the plaintext passed to HPKE is the randomly generated CEK. 
The output of the HPKE SealBase function is therefore 
the encrypted CEK along with HPKE encapsulated key (i.e. the ephemeral ECDH 
public key).</t>

<t>Only the holder of recipient’s private key can decapsulate the CEK to decrypt the 
firmware. Key generation in HPKE is influced by additional parameters, such as 
identity information.</t>

<t>This approach allows all recipients to use the same CEK to encrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast protocol.</t>

<t><xref target="cose-hpke"/> defines the use of HPKE with COSE and this specification profiles it.</t>

<figure title="CDDL for HPKE-based COSE_Encrypt Structure" anchor="cddl-hpke"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

; Layer 0
COSE_Encrypt = [
  protected   : bstr .cbor header_map, ; must contain alg
  unprotected : header_map,            ; must contain iv
  ciphertext  : null,                  ; because of detached ciphertext
  recipients  : [+COSE_recipient_outer]
]

; Layer 1   
COSE_recipient_outer = [
  protected   : bstr .size 0,
  unprotected : header_map, ; must contain alg
  encCEK      : bstr,       ; CEK encrypted based on HPKE algo
  recipients  : [ + COSE_recipient_inner ]  
]

; Layer 2
COSE_recipient_inner = [
  protected   : bstr .cbor header_map, ; must contain HPKE alg
  unprotected : header_map, ; must contain kid and ephemeral public key
  empty       : null,
  empty       : null
]

header_map = {
  Generic_Headers,
  * label =values,
}

Generic_Headers = (
    ? 1 => int,         ; algorithm identifier
    ? 2 => crv,         ; EC identifier
    ? 4 => bstr,        ; key identifier
    ? 5 => bstr         ; IV
)
]]></artwork></figure>

<t>The COSE_Encrypt structure (layer 0) contains algorithm parameters for 
encryption of the firmware image. The protected field MUST contain the ‘alg’ parameter 
and the unprotected field MUST contain the ‘iv’ parameter. The ciphertext is always 
detached.</t>

<t>The COSE_recipient_outer structure (layer 1) contains the encrypted CEK. The
protected structure MUST be empty and the unprotected structure MUST contain the 
‘alg’ parameter, which carries the algorithm information for protecting the CEK.</t>

<t>The COSE_recipient_inner structure (layer 2) contains the HPKE-related information. 
The protected structure MUST contain the ‘alg’ parameter set to the algorithm values in 
Section 6 of <xref target="cose-hpke"/> and the unprotected structure MUST contain the ‘kid’ and 
the ‘ephemeral’ parameter.</t>

<t>To populate the SUIT_Encryption_Info structure the sender creates a CEK randomly.
The CEK is used to encrypt the firmware image with the selected algorithm.</t>

<t>The HPKE SealBase function takes various input parameters, as explained in <xref target="cose-hpke"/>.
The most important input parameters are the plaintext (CEK in our case) and the public key of 
the recipient. If successful, SealBase will return the encrypted CEK and the 
ephemeral public key.</t>

<t>The recipient receives the ephemeral public key and the encrypted CEK from the sender. 
It then uses the HPKE OpenBase function to decrypt the ciphertext (which contains 
the CEK).</t>

<t>If the HPKE OpenBase function is successful, the recipient obtains the CEK and can decrypt the 
firmware. The decryption operation is shown in Figure 4 of <xref target="cose-hpke"/>.</t>

<t>An example of the COSE_Encrypt structure using the HPKE scheme is 
shown in <xref target="hpke-example"/>. It uses the following algorithm 
combination:</t>

<t><list style="symbols">
  <t>AES-GCM-128 for encryption of the firmware image.</t>
  <t>AES-GCM-128 for encrytion of the CEK.</t>
  <t>Key Encapsulation Mechanism (KEM): NIST P-256</t>
  <t>Key Derivation Function (KDF): HKDF-SHA256</t>
</list></t>

<figure title="COSE_Encrypt Example for HPKE" anchor="hpke-example"><artwork><![CDATA[
96( 
    [
        // protected field with alg=AES-GCM-128
        h'A10101',   
        {    // unprotected field with iv
             5: h'26682306D4FB28CA01B43B80'
        }, 
        // null because of detached ciphertext
        null,  
        [  // COSE_recipient_outer
            h'',          // empty protected field
            {             // unprotected field with ... 
                 1: 1     //     alg=A128GCM
            },
            // Encrypted CEK
            h'FA55A50CF110908DA6443149F2C2062011A7D8333A72721A',
            [    // COSE_recipient_inner
                 // protected field with alg HPKE/P-256+HKDF-256 (new)
                 h'A1013818',
                 {  // unprotected field with ...
                    //    HPKE encapsulated key
                    -1: h'A4010220012158205F...979D51687187510C445’,
                    //    kid for recipient static ECDH public key
                     4: h'6B69642D31'
                 }, 
                 // empty ciphertext
                 null
            ]
        ]
     ]
)
]]></artwork></figure>

</section>
<section anchor="cek-verification" title="CEK Verification">

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK.</t>

<t>[[Editor’s Note: Guidance about the selection of an IV needs to be added here.]]</t>

</section>
<section anchor="complete-examples" title="Complete Examples">

<t>[[Editor’s Note: Add examples for a complete manifest here (including a digital signature), 
multiple recipients, encryption of manifests (in comparison to firmware images).]]</t>

</section>
<section anchor="sec-cons" title="Security Considerations">

<t>The algorithms described in this document assume that the party performing the firmware encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the firmware consumer (for use with the AES-Key Wrap scheme), or</t>
  <t>is in possession of the public key of the firmware consumer (for use with HPKE).</t>
</list></t>

<t>Both cases require some upfront communication interaction, which is not part of the SUIT manifest. 
This interaction is likely provided by an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES-Key Wrap to provide high security it is important that the KEK is of high entropy, and that implementations protect the KEK from disclosure. Compromise of the KEK may result in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number generations are followed, see <xref target="RFC8937"/>.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With encrypted firmware images this type of analysis is prevented. Consequently, these third party companies either need to be given access to the plaintext binary before encryption or they need to become authorized recipients of the encrypted firmware images. In either case, it is necessary to explicitly consider those third parties in the software supply chain when such a binary analysis is desired.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document does not require any actions by IANA.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC3394" target='https://www.rfc-editor.org/info/rfc3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='2002' month='September' />
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference  anchor="RFC8152" target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'><organization /></author>
<date year='2017' month='July' />
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference  anchor="RFC8174" target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author initials='B.' surname='Leiba' fullname='B. Leiba'><organization /></author>
<date year='2017' month='May' />
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>


<reference anchor="I-D.ietf-suit-manifest">
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname="Koen Zandberg">
	 <organization>Inria</organization>
      </author>
      <date month="July" day="12" year="2021" />
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-manifest-14" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-manifest-14.txt" />
</reference>


<reference anchor="I-D.irtf-cfrg-hpke">
   <front>
      <title>Hybrid Public Key Encryption</title>
      <author fullname="Richard L. Barnes">
	 <organization>Cisco</organization>
      </author>
      <author fullname="Karthik Bhargavan">
	 <organization>Inria</organization>
      </author>
      <author fullname="Benjamin Lipp">
	 <organization>Inria</organization>
      </author>
      <author fullname="Christopher A. Wood">
	 <organization>Cloudflare</organization>
      </author>
      <date month="September" day="2" year="2021" />
      <abstract>
	 <t>   This document describes a scheme for hybrid public-key encryption
   (HPKE).  This scheme provides a variant of public-key encryption of
   arbitrary-sized plaintexts for a recipient public key.  It also
   includes three authenticated variants, including one which
   authenticates possession of a pre-shared key, and two optional ones
   which authenticate possession of a KEM private key.  HPKE works for
   any combination of an asymmetric key encapsulation mechanism (KEM),
   key derivation function (KDF), and authenticated encryption with
   additional data (AEAD) encryption function.  Some authenticated
   variants may not be supported by all KEMs.  We provide instantiations
   of the scheme using widely used and efficient primitives, such as
   Elliptic Curve Diffie-Hellman key agreement, HKDF, and SHA2.

   This document is a product of the Crypto Forum Research Group (CFRG)
   in the IRTF.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-cfrg-hpke-12" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-irtf-cfrg-hpke-12.txt" />
</reference>


<reference anchor="cose-hpke" target="https://datatracker.ietf.org/doc/html/draft-tschofenig-cose-hpke-00">
  <front>
    <title>Use of Hybrid Public-Key Encryption (HPKE) with CBOR Object Signing and Encryption (COSE)</title>
    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization>Arm Limited</organization>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization>Vigil Security</organization>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
    </author>
    <date year="2021" month="October" day="18"/>
  </front>
</reference>


    </references>

    <references title='Informative References'>





<reference  anchor="RFC9019" target='https://www.rfc-editor.org/info/rfc9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author initials='B.' surname='Moran' fullname='B. Moran'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='D.' surname='Brown' fullname='D. Brown'><organization /></author>
<author initials='M.' surname='Meriac' fullname='M. Meriac'><organization /></author>
<date year='2021' month='April' />
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>


<reference anchor="I-D.ietf-suit-information-model">
   <front>
      <title>A Manifest Information Model for Firmware Updates in IoT Devices</title>
      <author fullname="Brendan Moran">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Hannes Tschofenig">
	 <organization>Arm Limited</organization>
      </author>
      <author fullname="Henk Birkholz">
	 <organization>Fraunhofer SIT</organization>
      </author>
      <date month="July" day="8" year="2021" />
      <abstract>
	 <t>   Vulnerabilities with Internet of Things (IoT) devices have raised the
   need for a reliable and secure firmware update mechanism that is also
   suitable for constrained devices.  Ensuring that devices function and
   remain secure over their service life requires such an update
   mechanism to fix vulnerabilities, to update configuration settings,
   as well as adding new functionality.

   One component of such a firmware update is a concise and machine-
   processable meta-data document, or manifest, that describes the
   firmware image(s) and offers appropriate protection.  This document
   describes the information that must be present in the manifest.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-suit-information-model-13" />
   <format type="TXT" target="https://www.ietf.org/archive/id/draft-ietf-suit-information-model-13.txt" />
</reference>



<reference  anchor="RFC8937" target='https://www.rfc-editor.org/info/rfc8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author initials='C.' surname='Cremers' fullname='C. Cremers'><organization /></author>
<author initials='L.' surname='Garratt' fullname='L. Garratt'><organization /></author>
<author initials='S.' surname='Smyshlyaev' fullname='S. Smyshlyaev'><organization /></author>
<author initials='N.' surname='Sullivan' fullname='N. Sullivan'><organization /></author>
<author initials='C.' surname='Wood' fullname='C. Wood'><organization /></author>
<date year='2020' month='October' />
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference  anchor="RFC2630" target='https://www.rfc-editor.org/info/rfc2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author initials='R.' surname='Housley' fullname='R. Housley'><organization /></author>
<date year='1999' month='June' />
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>



<reference  anchor="RFC4949" target='https://www.rfc-editor.org/info/rfc4949'>
<front>
<title>Internet Security Glossary, Version 2</title>
<author initials='R.' surname='Shirey' fullname='R. Shirey'><organization /></author>
<date year='2007' month='August' />
<abstract><t>This Glossary provides definitions, abbreviations, and explanations of terminology for information system security. The 334 pages of entries offer recommendations to improve the comprehensibility of written material that is generated in the Internet Standards Process (RFC 2026). The recommendations follow the principles that such writing should (a) use the same term or definition whenever the same concept is mentioned; (b) use terms in their plainest, dictionary sense; (c) use terms that are already well-established in open publications; and (d) avoid terms that either favor a particular vendor or favor a particular technology or mechanism over other, competing techniques that already exist or could be developed.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='FYI' value='36'/>
<seriesInfo name='RFC' value='4949'/>
<seriesInfo name='DOI' value='10.17487/RFC4949'/>
</reference>




    </references>


<section anchor="acknowledgements" title="Acknowledgements">

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. Additionally, we would like to thank Michael Richardson and Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
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
n3MjK/B/YaBBw7liAAA=

-->

</rfc>

