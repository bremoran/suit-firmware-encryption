<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.24 (Ruby 2.5.1) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc rfcedstyle="yes"?>
<?rfc tocindent="yes"?>
<?rfc strict="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc text-list-symbols="-o*+"?>
<?rfc docmapping="yes"?>
<?rfc toc_levels="4"?>

<rfc ipr="pre5378Trust200902" docName="draft-ietf-suit-firmware-encryption-10" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="Encrypted Payloads in SUIT Manifests">Encrypted Payloads in SUIT Manifests</title>

    <author initials="H." surname="Tschofenig" fullname="Hannes Tschofenig">
      <organization></organization>
      <address>
        <email>hannes.tschofenig@gmx.net</email>
      </address>
    </author>
    <author initials="R." surname="Housley" fullname="Russ Housley">
      <organization abbrev="Vigil Security">Vigil Security, LLC</organization>
      <address>
        <email>housley@vigilsec.com</email>
      </address>
    </author>
    <author initials="B." surname="Moran" fullname="Brendan Moran">
      <organization>Arm Limited</organization>
      <address>
        <email>Brendan.Moran@arm.com</email>
      </address>
    </author>
    <author initials="D." surname="Brown" fullname="David Brown">
      <organization>Linaro</organization>
      <address>
        <email>david.brown@linaro.org</email>
      </address>
    </author>
    <author initials="K." surname="Takayama" fullname="Ken Takayama">
      <organization>SECOM CO., LTD.</organization>
      <address>
        <email>ken.takayama.ietf@gmail.com</email>
      </address>
    </author>

    <date year="2023" month="March" day="06"/>

    <area>Security</area>
    <workgroup>SUIT</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document specifies techniques for encrypting software, firmware 
and personalization data by utilizing the IETF 
SUIT manifest. Key agreement is provided by ephemeral-static (ES)
Diffie-Hellman (DH) and AES Key Wrap (AES-KW). ES-DH
uses public key cryptography while AES-KW uses a pre-shared 
key-encryption key. Encryption of the plaintext is 
accomplished with conventional symmetric key cryptography.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>Vulnerabilities with Internet of Things (IoT) devices have raised the
need for a reliable and secure firmware update mechanism that is also
suitable for constrained devices. To protect firmware images the SUIT manifest
format was developed <xref target="I-D.ietf-suit-manifest"/>. The SUIT manifest provides a 
bundle of metadata about the firmware for an IoT device, where to find 
the firmware image, and the devices to which it applies.</t>

<t>The SUIT information model <xref target="RFC9124"/> details the
information that has to be offered by the SUIT manifest format. In addition to
offering protection against modification, which is provided by a digital
signature or a message authentication code, the firmware image may also 
be afforded confidentiality using encryption.</t>

<t>Encryption prevents third parties, including attackers, from gaining access to
the firmware binary. Hackers typically need intimate knowledge of the target 
firmware to mount their attacks. For example, return-oriented programming (ROP)
requires access to the binary and encryption makes it much more difficult to write 
exploits.</t>

<t>The SUIT manifest provides the data needed for authorized recipients 
of the firmware image to decrypt it. The firmware image is encrypted using a 
symmetric key.</t>

<t>A symmetric key can be established using a variety of mechanisms; this document 
defines two approaches for use with the IETF SUIT manifest, namely:</t>

<t><list style="symbols">
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH), and</t>
  <t>AES Key Wrap (AES-KW) using a pre-shared key-encryption key (KEK).</t>
</list></t>

<t>These choices reduce the number of possible key establishment options and thereby 
help increase interoperability between different SUIT manifest parser implementations.</t>

<t>While the original motivating use case of this document was firmware encryption, SUIT manifests
may require payloads other than firmware images to experience confidentiality
protection, such as
- software (other than firmware),
- personalization data, 
- configuration data,
- machine learning models, etc.</t>

<t>Hence, the term payload is used to generically refer to those objects that may be subject to 
encryption.</t>

</section>
<section anchor="conventions-and-terminology"><name>Conventions and Terminology</name>

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/>
when, and only when, they appear in all capitals, as shown here.</t>

<t>This document assumes familiarity with the IETF SUIT manifest <xref target="I-D.ietf-suit-manifest"/>, 
the SUIT information model <xref target="RFC9124"/> and the SUIT architecture <xref target="RFC9019"/>.</t>

<t>The terms sender and recipient have the following meaning:</t>

<t><list style="symbols">
  <t>Sender: Role of the entity that sends an encrypted payload.</t>
  <t>Recipient: Role of the entity that receives an encrypted payload.</t>
</list></t>

<t>Additionally, the following abbreviations are used in this document:</t>

<t><list style="symbols">
  <t>Key Wrap (KW), defined in <xref target="RFC3394"/> (for use with AES)</t>
  <t>Key-Encryption Key (KEK) <xref target="RFC3394"/></t>
  <t>Content-Encryption Key (CEK) <xref target="RFC2630"/></t>
  <t>Ephemeral-Static (ES) Diffie-Hellman (DH) <xref target="RFC9052"/></t>
</list></t>

</section>
<section anchor="arch"><name>Architecture</name>

<t><xref target="RFC9019"/> describes the architecture for distributing payloads 
and manifests from an author to devices. It does, however, not
detail the use of payload encryption.</t>

<t>This document enhances this architecture to support encryption.
The author and the distribution system are logical roles. In some deployments
these roles are separated in different physical entities and in others
they are co-located.</t>

<t><xref target="arch-fig"/> shows the distribution system, which represents the firmware server 
and the device management infrastructure. The distribution system is aware 
of the individual devices to which a payload has to be delivered. The author
is typically unaware which devices need to receive these payloads.</t>

<t>To apply encryption the sender needs to know the recipient. For AES-KW the 
KEK needs to be known and, in case of ES-DH, the sender needs to be in possession 
of the public key of the recipient.</t>

<t>If the author delegates the task of identifying devices that are the recipients 
of the payloads to the distribution system, it needs to trust the delivery 
system to perform the encryption of the plaintext firmware image.</t>

<figure title="Firmware Encryption Architecture." anchor="arch-fig"><artwork><![CDATA[
                                           +----------+
                                           |          |
                                           |  Author  |
                                           |          |
 +----------+                              +----------+
 |  Device  |---+                               | 
 |          |   |                               | Firmware +
 |          |   |                               | Manifest
 +----------+   |                               |
                |                               |
                |                        +--------------+
                |                        |              |
 +----------+   |  Firmware + Manifest   | Distribution |
 |  Device  |---+------------------------|    System    |
 |          |   |                        |              |
 |          |   |                        |              |
 +----------+   |                        +--------------+
                |
                |
 +----------+   |
 |  Device  +---+
 |          |
 |          |
 +----------+
]]></artwork></figure>

<t>To offer confidentiality protection two deployment variants need to be 
supported:</t>

<t><list style="symbols">
  <t>The author acts as the sender and the recipient is the device
(or the devices).</t>
  <t>The author treats the distribution system as the initial recipient. Then, 
the distribution system decrypts and re-encrypts the payload for consumption 
by the device (or devices). Delegating the task of re-encrypting 
the payload to the distribution system offers flexiblity when the number 
of devices that need to receive encrypted payloads changes dynamically 
or when updates to KEKs or recipient public keys are necessary. As a downside, 
the author needs to trust the distribution system with performing the re-encryption 
of the payload.</t>
</list></t>

<t>For both variants the key distribution data (embedded inside the
COSE_Encrypt structure) is included in the SUIT envelope rather than in the SUIT 
manifest since the manifest will be digitally signed (or MACed) by the author.</t>

<t>Details about the changes to the envelope and the manifest can be found in the next 
section.</t>

</section>
<section anchor="suit-envelope-and-suit-manifest"><name>SUIT Envelope and SUIT Manifest</name>

<t>This specification introduces two extensions to the SUIT_Parameters,
as motivated in <xref target="arch"/>.</t>

<t>The SUIT manifest is enhanced with a key exchange payload, which is carried within
the suit-directive-override-parameters or suit-directive-set-parameters for each
encrypted payload. One SUIT_Encryption_Info is carried with
suit-parameter-encryption-info, see <xref target="parameter-fig"/>.
The content of the SUIT_Encryption_Info is explained in 
<xref target="AES-KW"/> (for AES-KW) and <xref target="RFC9052"/> (for ECDH-ES). When the encryption capability 
is used, the SUIT_Encryption_Info parameter MUST be included in the SUIT_Directive.</t>

<t>A CEK verification parameter (called suit-parameter-cek-verification),
see <xref target="parameter-fig"/>, also extends the manifest. This parameter is optional 
and is utilized in environments where battery exhaustion attacks are a 
concern. Details about the CEK verification can be found in 
<xref target="cek-verification"/>.</t>

<figure title="Extended SUIT_Parameters CDDL." anchor="parameter-fig"><artwork><![CDATA[
SUIT_Manifest = {
    suit-manifest-version         => 1,
    suit-manifest-sequence-number => uint,
    suit-common                   => bstr .cbor SUIT_Common,
    ? suit-reference-uri          => tstr,
    SUIT_Severable_Members_Choice,
    SUIT_Unseverable_Members,
    * $$SUIT_Manifest_Extensions,
}

SUIT_Parameters //= (suit-parameter-encryption-info
    => bstr .cbor SUIT_Encryption_Info)
SUIT_Parameters //= (suit-parameter-cek-verification => bstr)

suit-parameter-encryption-info   = 19
]]></artwork></figure>

</section>
<section anchor="AES-KW"><name>AES Key Wrap</name>

<t>The AES Key Wrap (AES-KW) algorithm is described in RFC 3394 <xref target="RFC3394"/>, and
it can be used to encrypt a randomly generated content-encryption key (CEK)
with a pre-shared key-encryption key (KEK). The COSE conventions for using
AES-KW are specified in Section 8.5.2 of <xref target="RFC9052"/> and in Section 6.2.1 of 
<xref target="RFC9053"/>.  The encrypted CEK is carried in the COSE_recipient structure
alongside the information needed for AES-KW. The COSE_recipient structure,
which is a substructure of the COSE_Encrypt structure, contains the CEK 
encrypted by the KEK.</t>

<t>When the firmware image is encrypted for use by multiple recipients, there 
are three options. We use the following notation KEK(R1,S) is the KEK shared 
between recipient R1 and the sender S. Likewise, CEK(R1,S) is shared between
R1 and S. If a single CEK or a single KEK is shared with all authorized 
recipients R by a given sender S in a certain context then we use CEK(<em>,S) 
or KEK(</em>,S), respectively. The notation ENC(plaintext, key) refers to the
encryption of plaintext with a given key.</t>

<t><list style="symbols">
  <t>If all authorized recipients have access to the KEK, a single 
COSE_recipient structure contains the encrypted CEK. This means KEK(*,S) 
ENC(CEK,KEK), and ENC(payload,CEK).</t>
  <t>If recipients have different KEKs, then multiple COSE_recipient structures 
are included but only a single CEK is used. Each COSE_recipient structure 
contains the CEK encrypted with the KEKs appropriate for the recipient. In short, 
KEK_1(R1, S),..., KEK_n(Rn, S), ENC(CEK, KEK_i) for i=1 to n, and ENC(firmware,CEK). 
The benefit of this approach is that the payload is encrypted only once with 
a CEK while there is no sharing of the KEK across recipients. Hence, authorized 
recipients still use their individual KEKs to decrypt the CEK and to subsequently
obtain the plaintext.</t>
  <t>The third option is to use different CEKs encrypted with KEKs of the 
authorized recipients. Assume there are KEK_1(R1, S),..., KEK_n(Rn, S), and 
for i=1 to n the following computations need to be made: ENC(CEK_i, KEK_i) and 
ENC(firmware,CEK_i). This approach is appropriate when no benefits can be gained
from encrypting and transmitting payloads only once. For example, 
payloads may contain information unique to an instance of a device rather than
information that is independent of a device instance and therefore applies to an 
entire class of devices.</t>
</list></t>

<t>Note that the AES-KW algorithm, as defined in Section 2.2.3.1 of <xref target="RFC3394"/>, 
does not have public parameters that vary on a per-invocation basis. Hence, 
the protected structure in the COSE_recipient is a byte string of zero length.</t>

<t>The COSE_Encrypt conveys information for encrypting the payload, which 
includes information like the algorithm and the IV, even though the payload 
is not embedded in the COSE_Encrypt.ciphertext itself since it conveyed as detached content.</t>

<t>The CDDL for the COSE_Encrypt_Tagged structure is shown in <xref target="cddl-aeskw"/>.</t>

<figure title="CDDL for AES Key Wrap Encryption" anchor="cddl-aeskw"><artwork><![CDATA[
COSE_Encrypt_Tagged = #6.96(COSE_Encrypt)
 
SUIT_Encryption_Info = COSE_Encrypt_Tagged

COSE_Encrypt = [
  protected   : bstr .cbor outer_header_map_protected,
  unprotected : outer_header_map_unprotected,
  ciphertext  : null,            ; because of detached ciphertext
  recipients  : [ + COSE_recipient ]
]

outer_header_map_protected =
{
    1 => int,         ; algorithm identifier
  * label =values     ; extension point
}

outer_header_map_unprotected = 
{
    5 => bstr,        ; IV
  * label =values     ; extension point
}

COSE_recipient = [
  protected   : bstr .size 0,
  unprotected : recipient_header_map,
  ciphertext  : bstr        ; CEK encrypted with KEK
]

recipient_header_map = 
{
    1 => int,         ; algorithm identifier
    4 => bstr,        ; key identifier
  * label =values     ; extension point
}
]]></artwork></figure>

<t>The COSE specification requires a consistent byte stream for the
authenticated data structure to be created, which is shown in
<xref target="cddl-enc-aeskw"/>.</t>

<figure title="CDDL for Enc_structure Data Structure" anchor="cddl-enc-aeskw"><artwork><![CDATA[
       Enc_structure = [
         context : "Encrypt",
         protected : empty_or_serialized_map,
         external_aad : bstr
       ]
]]></artwork></figure>

<t>As shown in <xref target="cddl-aeskw"/>, there are two protected fields: one 
protected field in the COSE_Encrypt structure and a second one in
the COSE_recipient structure. The 'protected' field in the Enc_structure, 
see <xref target="cddl-enc-aeskw"/>, refers to the content of the protected 
field from the COSE_Encrypt structure.</t>

<t>The value of the external_aad MUST be set to null.</t>

<t>The following example illustrates the use of the AES-KW algorithm with AES-128.</t>

<t>We use the following parameters in this example:</t>

<t><list style="symbols">
  <t>IV: 0x26, 0x68, 0x23, 0x06, 0xd4, 0xfb, 0x28, 0xca, 0x01, 0xb4, 0x3b, 0x80</t>
  <t>KEK: "aaaaaaaaaaaaaaaa"</t>
  <t>KID: "kid-1"</t>
  <t>Plaintext: "This is a real firmware image."</t>
  <t>Firmware (hex): 546869732069732061207265616C206669726D7761726520696D6167652E</t>
</list></t>

<t>The COSE_Encrypt structure, in hex format, is (with a line break inserted):</t>

<figure><artwork><![CDATA[
D8608443A10101A1054C26682306D4FB28CA01B43B80F68340A2012204456B69642D
315818AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D
]]></artwork></figure>

<t>The resulting COSE_Encrypt structure in a diagnostic format is shown in <xref target="aeskw-example"/>.</t>

<figure title="COSE_Encrypt Example for AES Key Wrap" anchor="aeskw-example"><artwork><![CDATA[
96(
    [
        / protected field with alg=AES-GCM-128 /
        h'A10101', 
        {
           / unprotected field with iv /
           5: h'26682306D4FB28CA01B43B80'
        }, 
        / null because of detached ciphertext /
        null, 
        [ / recipients array /
           h'', / protected field /
           {    / unprotected field /
              1: -3,            / alg=A128KW /
              4: h'6B69642D31'  / key id /
           }, 
           / CEK encrypted with KEK /
           h'AF09622B4F40F17930129D18D0CEA46F159C49E7F68B644D'
        ]
    ]
)
]]></artwork></figure>

<t>The CEK, in hex format, was "4C805F1587D624ED5E0DBB7A7F7FA7EB" and 
the encrypted firmware (with a line feed added) was:</t>

<figure><artwork><![CDATA[
A8B6E61EF17FBAD1F1BF3235B3C64C06098EA512223260
F9425105F67F0FB6C92248AE289A025258F06C2AD70415
]]></artwork></figure>

</section>
<section anchor="ESDH"><name>Ephemeral-Static (ES) Diffie-Hellman (DH)</name>

<t>ES-DH, see <xref target="RFC9052"/>, is a scheme that provides public key
encryption given a recipient's public key.</t>

<t>The following three layer structure is used:</t>

<t><list style="symbols">
  <t>Layer 0: Has a content encrypted with the CEK. The content may be detached.</t>
  <t>Layer 1: Uses the AES Key Wrap algorithm to encrypt a randomly generated
CEK with the KEK derived by layer 2.</t>
  <t>Layer 2: Uses ECDH Ephemeral-Static direct to generate the KEK for layer 1.</t>
</list></t>

<t>As a result, the three layers combine ECDH-ES with AES-KW. An example is
given in Appendix B of RFC 9052.</t>

<t>This approach allows all recipients to use the same CEK to decrypt the 
firmware image, in case there are multiple recipients, to fulfill a requirement for 
the efficient distribution of firmware images using a multicast or broadcast 
distribution protocol.</t>

</section>
<section anchor="cek-verification"><name>CEK Verification</name>

<t>While the SUIT manifest is integrity protected and authenticated, the SUIT envelope 
is not protected cryptographically. Hence, an adversary located along the communication
path between the sender and the recipient could modify the COSE_Encrypt structure
(assuming that no other communication security mechanism is in use).</t>

<t>For example, if the attacker alters the key distribution data then a recipient will
decrypt the firmware image with an incorrect key. This will lead to expending 
energy and flash cycles until the failure is detected.</t>

<t>To mitigate this attack, a new parameter, called suit-cek-verification, is added
to the manifest. The suit-cek-verification parameter is optional to implement and 
optional to use. When used, it reduces the risk of a battery exhaustion attack against 
the IoT device.</t>

<t>Since the manifest is protected by a digital signature (or a MAC), an adversary cannot 
successfully modify this value. This parameter allows the recipient to verify 
whether the CEK has successfully been derived.</t>

<t>The suit-cek-verification parameter contains a byte string resulting from the 
encryption of 8 bytes of 0xA5 using the CEK with a nonce of all zeros and empty 
additional data using the cipher algorithm and mode also used to encrypt the
plaintext. The same nonce used for CEK verification MUST NOT be used to 
encrypt plaintext with the same CEK.</t>

</section>
<section anchor="firmware-updates-on-iot-devices-with-flash-memory"><name>Firmware Updates on IoT Devices with Flash Memory.</name>

<t>Flash memory on microcontrollers is a type of non-volatile memory that erases
data in units called blocks, pages or sectors and re-writes data at byte level 
(often 4-bytes).
Flash memory is furthermore segmented into different memory regions, which store
the bootloader, different versions of firmware images (in so-called slots), 
and configuration data. <xref target="image-layout"/> shows an example layout of a 
microcontroller flash area. The primary slot contains the firmware image to be 
executed by the bootloader, which is a common deployment on devices that do 
not offer the concept of position independent code.</t>

<t>When the encrypted firmware image has been transferred to the device, it will
typically be stored in a staging area, in the secondary slot in our example.</t>

<t>At the next boot, the bootloader will recognize a new firmware image in the 
secondary slot and will start decrypting the downloaded image sector-by-sector
and will swap it with the image found in the primary slot.</t>

<t>The swap should only take place after the signature on the plaintext is verified.
Note that the plaintext firmware image is available in the primary slot only after
the swap has been completed, unless "dummy decrypt" is used to compute the hash 
over the plaintext prior to executing the decrypt operation during a swap.
Dummy decryption here refers to the decryption of the firmware image found in 
the secondary slot sector-by-sector and computing a rolling hash over the resulting
plaintext firmware image (also sector-by-sector) without performing the swap operation. 
While there are performance optimizations possible, such as conveying hashes for 
each sector in the manifest rather than a hash of the entire firmware image, 
such optimizations are not described in this specification.</t>

<t>This approach of swapping the newly downloaded image with the previously valid 
image is often referred as A/B approach. A/B refers to the two slots involved.
Two slots are used to allow the update to be reversed in case the newly obtained
firmware image fails to boot. This approach adds robustness to the firmware 
update procedure.</t>

<t>Since the image in primary slot is available in cleartext it may need to 
re-encrypted it before copying it to the secondary slot. This may be necessary
when the secondary slot has different access permissions or when the staging
area is located in an off-chip flash memory and therefore more vulnerable to
physical attacks. Note that this description assumes that the processor does
not execute encrypted memory (i.e. using on-the-fly decryption in hardware).</t>

<figure title="Example Flash Area Layout" anchor="image-layout"><artwork><![CDATA[
+--------------------------------------------------+
| Bootloader                                       |
+--------------------------------------------------+
| Primary Slot                                     |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Secondary Slot                                   |
|                                        (sector 1)|
|..................................................|
|                                                  |
|                                        (sector 2)|
|..................................................|
|                                                  |
|                                        (sector 3)|
|..................................................|
|                                                  |
|                                        (sector 4)|
+--------------------------------------------------+
| Swap Area                                        |
|                                                  |
+--------------------------------------------------+
| Configuration Data                               |
+--------------------------------------------------+
]]></artwork></figure>

<t>The ability to restart an interrupted firmware update is often a requirement
for low-end IoT devices. To fulfill this requirement it is necessary to chunk
a firmware image into sectors and to encrypt each sector individually
using a cipher that does not increase the size of the resulting ciphertext 
(i.e., by not adding an authentication tag after each encrypted block).</t>

<t>When an update gets aborted while the bootloader is decrypting the newly obtained
image and swapping the sectors, the bootloader can restart where it left off. This
technique offers robustness and better performance.</t>

<t>For this purpose ciphers without integrity protection are used
to encrypt the firmware image. Integrity protection for the firmware image must,
however, be provided and the the suit-parameter-image-digest, defined in Section 
8.4.8.6 of <xref target="I-D.ietf-suit-manifest"/>, MUST be used.</t>

<t><xref target="I-D.ietf-cose-aes-ctr-and-cbc"/> registers AES Counter mode (AES-CTR) and 
AES Cipher Block Chaining (AES-CBC) ciphers that do not offer integrity protection. 
These ciphers are useful for the use cases that require firmware encryption on IoT
devices. For many other use cases where software packages, configuration information 
or personalization data needs to be encrypted, the use of Authenticated Encryption 
with Additional Data (AEAD) ciphers is preferred.</t>

<t>The following sub-sections provide further information about the initialization vector
(IV) selection for use with AES-CBC and AES-CTR in the firmware encryption context. An
IV MUST NOTE be re-used when the same key is used. For this application, the IVs are
not random but rather based on the slot/sector-combination in flash memory. The 
text below assumes that the block-size of AES is (much) smaller than sector size. The
typical sector-size of flash memory is in the order of KiB. Hence, multiple AES blocks
need to be decrypted until an entire sector is completed.</t>

<section anchor="aes-cbc"><name>AES-CBC</name>

<t>In AES-CBC a single IV is used for encryption of firmware belonging to a single sector
since individual AES blocks are chained toghether, as shown in <xref target="aes-cbc-fig"/>. The numbering 
of sectors in a slot MUST start with zero (0) and MUST increase by one with every sector
till the end of the slot is reached. The IV follows this numbering.</t>

<t>For example, let us assume the slot size of a specific flash controller on an IoT device 
is 64 KiB, the sector size 4096 bytes (4 KiB) and AES-128-CBC uses an AES-block size of
128 bit (16 bytes). Hence, sector 0 needs 4096/16=256 AES-128-CBC operations using IV 0.
If the firmware image fills the entire slot then that slot contains 16 sectors, i.e. IVs
ranging from 0 to 15.</t>

<figure title="AES-CBC Operation" anchor="aes-cbc-fig"><artwork><![CDATA[
       P1              P2
        |              |
   IV--(+)    +-------(+)
        |     |        |
        |     |        |
    +-------+ |    +-------+
    |       | |    |       |
    |       | |    |       |
 k--|  E    | | k--|  E    |
    |       | |    |       |
    +-------+ |    +-------+
        |     |        |
        +-----+        |
        |              |
        |              |
        C1             C2

Legend: 
  Pi = Plaintext blocks
  Ci = Ciphertext blocks
  E = Encryption function
  k = Symmetric key
  (+) = XOR operation
]]></artwork></figure>

</section>
<section anchor="aes-ctr"><name>AES-CTR</name>

<t>Unlike AES-CBC, AES-CTR uses an IV per AES operation, as shown in <xref target="aes-ctr-fig"/>. 
Hence, when an image is encrypted using AES-CTR-128 or AES-CTR-256, the IV MUST
start with zero (0) and MUST be incremented by one for each 16-byte plaintext block
within the entire slot.</t>

<t>Using the previous example with a slot size of 64 KiB, the sector size 4096 bytes and
the AES plaintext block size of 16 byte requires IVs from 0 to 255 in the first sector
and 16 * 256 IVs for the remaining sectors in the slot. The last IV used to encrypt 
data in the slot is therefore</t>

<figure title="AES-CTR Operation" anchor="aes-ctr-fig"><artwork><![CDATA[
         IV1            IV2
          |              |
          |              |
          |              |
      +-------+      +-------+
      |       |      |       |
      |       |      |       |
   k--|  E    |   k--|  E    |
      |       |      |       |
      +-------+      +-------+
          |              |
     P1--(+)        P2--(+)
          |              |
          |              |
          C1             C2

Legend: 
  See previous diagram.
]]></artwork></figure>

</section>
</section>
<section anchor="complete-examples"><name>Complete Examples</name>

<t>[[Editor's Note: Add examples for a complete manifest here (including a digital signature), 
multiple recipients, encryption of manifests (in comparison to firmware images).]]</t>

<t>The following manifests examplify how to deliver the encrypted firmware and its encryption info to the Devices.</t>

<t>The examples are signed using the following ECDSA secp256r1 key:</t>

<figure><artwork><![CDATA[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgApZYjZCUGLM50VBC
CjYStX+09jGmnyJPrpDLTz/hiXOhRANCAASEloEarguqq9JhVxie7NomvqqL8Rtv
P+bitWWchdvArTsfKktsCYExwKNtrNHXi9OB3N+wnAUtszmR23M4tKiW
-----END PRIVATE KEY-----
]]></artwork></figure>

<t>The corresponding public key can be used to verify these examples:</t>

<figure><artwork><![CDATA[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEhJaBGq4LqqvSYVcYnuzaJr6qi/Eb
bz/m4rVlnIXbwK07HypLbAmBMcCjbazR14vTgdzfsJwFLbM5kdtzOLSolg==
-----END PUBLIC KEY-----
]]></artwork></figure>

<t>Each example uses SHA256 as the digest function.</t>

<section anchor="example-AES-KW"><name>Example 0: AES Key Wrap</name>

<t>Diagnostic notation of the SUIT manifest (with line
breaks added for readability).</t>

<figure><artwork><![CDATA[
/ SUIT_Envelope_Tagged / 107( {
  / suit-authentication-wrapper / 2: << [
    / digest: / << [
      / suit-digest-algorithm-id: / -16 / SHA256 /,
      / suit-digest-bytes: / 
      h'A447024C395B90095678C174C4075F3
      21EF29A57A0A028D01080019E5B21ED5F'
    ] >>,
    / signatures: / << / COSE_Sign1_Tagged / 18( [
      / protected: / << {
        / alg / 1: -7 / ES256 /
      } >>,
      / unprotected: / {},
      / payload: / null,
      / signature: / 
      h'65C40240E28F7F02046CE85F8343A78
      86B349D2523B3A815C161D54337395721
      953ACA109690B3588761195071BCF04D5
      57260484B4B281C508D9E95FED4B9EF'
    ] ) >>
  ] >>,
  / suit-manifest / 3: << {
    / suit-manifest-version / 1: 1,
    / suit-manifest-sequence-number / 2: 1,
    / suit-common / 3: << {
      / suit-components / 2: [
        [h'00'] / to be decrypted firmware /,
        [h'01'] / encrypted firmware /
      ]
    } >>,
    / suit-install / 17: << [
      / fetch encrypted firmware /
      / suit-directive-set-component-index / 12, 1 / [h'01'] /,
      / suit-directive-override-parameters / 20, {
        / suit-parameter-uri / 
        21: "https://author.example.com/encrypted-firmware.bin",
        / suit-parameter-image-digest / 3: << [
          / suit-digest-algorithm-id: / -16 / SHA256 /,
          / suit-digest-bytes: / 
          h'F63187728B49B0E57FE891B932C9C88
          1735D880EFAE69A9A4D45E0FE72C70DA1'
        ] >>,
        / suit-parameter-image-size / 14: 46
      },
      / suit-directive-fetch / 21, 15,
      / suit-condition-image-match / 3, 15,

      / decrypt encrypted firmware /
      / suit-directive-set-component-index / 12, 0 / [h'00'] /,
      / suit-directive-override-parameters / 20, {
        / suit-parameter-source-component / 22: 1 / [h'01'] /,
        / suit-parameter-encryption-info<TBD> / 19: 96( [
          / protected: / << {
            / alg / 1: 1 / AES-GCM-128 /
          } >>,
          / unprotected: / {
             / iv / 5: h'26682306D4FB28CA01B43B80'
          },
          / payload: / null / detached ciphertext /,
          / recipients: / [
             / protected / h'',
             / unprotected / {
               / alg / 1: -3 / A128KW /,
               / kid / 4: h'6B69642D31'
              },
             / payload: CEK encrypted with KEK / 
             h'AF09622B4F40F17930129D18D0C
             EA46F159C49E7F68B644D' 
          ]
        ] )
      },
      / suit-directive-copy / 22, 15 
      / consumes the SUIT_Encryption_Info above /,

      / verify decrypted firmware /
      / suit-directive-override-parameters / 20, {
        / suit-parameter-image-digest / 3: << [
          / suit-digest-algorithm-id: / -16 / SHA256 /,
          / suit-digest-bytes: / 
          h'36921488FE6680712F734E11F58D87E
          EB66D4B21A8A1AD3441060814DA16D50F'
        ] >>,
        / suit-parameter-image-size / 14: 30
      },
      / suit-condition-image-match / 3, 15
    ] >>
  } >>
} )
]]></artwork></figure>

<t>In hex:</t>

<figure><artwork><![CDATA[
D86BA2025873825824822F5820A447024C395B90095678C174C4075F321E
F29A57A0A028D01080019E5B21ED5F584AD28443A10126A0F6584065C402
40E28F7F02046CE85F8343A7886B349D2523B3A815C161D5433739572195
3ACA109690B3588761195071BCF04D557260484B4B281C508D9E95FED4B9
EF0358EEA4010102010349A102828141008141011158DB920C0114A31578
3168747470733A2F2F617574686F722E6578616D706C652E636F6D2F656E
637279707465642D6669726D776172652E62696E035824822F5820F63187
728B49B0E57FE891B932C9C881735D880EFAE69A9A4D45E0FE72C70DA10E
182E150F030F0C0014A2160113D8608443A10101A1054C26682306D4FB28
CA01B43B80F68340A2012204456B69642D315818AF09622B4F40F1793012
9D18D0CEA46F159C49E7F68B644D160F14A2035824822F582036921488FE
6680712F734E11F58D87EEB66D4B21A8A1AD3441060814DA16D50F0E181E
030F
]]></artwork></figure>

</section>
</section>
<section anchor="sec-cons"><name>Security Considerations</name>

<t>The algorithms described in this document assume that the party performing payload encryption</t>

<t><list style="symbols">
  <t>shares a key-encryption key (KEK) with the recipient (for use with the AES Key Wrap scheme), or</t>
  <t>is in possession of the public key of the recipient (for use with ECDH-ES).</t>
</list></t>

<t>Both cases require some upfront communication interaction. This interaction is likely provided by
an IoT device management solution, as described in <xref target="RFC9019"/>.</t>

<t>For AES Key Wrap to provide high security it is important that the KEK is of high entropy, 
and that implementations protect the KEK from disclosure. Compromise of the KEK may result 
in the disclosure of all key data protected with that KEK.</t>

<t>Since the CEK is randomly generated, it must be ensured that the guidelines for random number 
generation in <xref target="RFC8937"/> are followed.</t>

<t>In some cases third party companies analyse binaries for known security vulnerabilities. With 
encrypted payloads this type of analysis is prevented. Consequently, these third party 
companies either need to be given access to the plaintext binary before encryption or they need 
to become authorized recipients of the encrypted payloads. In either case, it is necessary to 
explicitly consider those third parties in the software supply chain when such a binary analysis
is desired.</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document asks IANA to register new values into the COSE algorithm
registry. The values are listed in <xref target="iana-algo"/>.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC3394'>
<front>
<title>Advanced Encryption Standard (AES) Key Wrap Algorithm</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='September' year='2002'/>
</front>
<seriesInfo name='RFC' value='3394'/>
<seriesInfo name='DOI' value='10.17487/RFC3394'/>
</reference>



<reference anchor='RFC9052'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t><t>This document, along with RFC 9053, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='STD' value='96'/>
<seriesInfo name='RFC' value='9052'/>
<seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>



<reference anchor='RFC9053'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052). </t><t>This document, along with RFC 9052, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='RFC' value='9053'/>
<seriesInfo name='DOI' value='10.17487/RFC9053'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>


<reference anchor='I-D.ietf-suit-manifest'>
   <front>
      <title>A Concise Binary Object Representation (CBOR)-based Serialization Format for the Software Updates for Internet of Things (SUIT) Manifest</title>
      <author fullname='Brendan Moran' initials='B.' surname='Moran'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <author fullname='Henk Birkholz' initials='H.' surname='Birkholz'>
         <organization>Fraunhofer SIT</organization>
      </author>
      <author fullname='Koen Zandberg' initials='K.' surname='Zandberg'>
         <organization>Inria</organization>
      </author>
      <author fullname='Ãyvind RÃ¸nningstad' initials='O.' surname='RÃ¸nningstad'>
         <organization>Nordic Semiconductor</organization>
      </author>
      <date day='27' month='February' year='2023'/>
      <abstract>
	 <t>   This specification describes the format of a manifest.  A manifest is
   a bundle of metadata about code/data obtained by a recipient (chiefly
   the firmware for an IoT device), where to find the that code/data,
   the devices to which it applies, and cryptographic information
   protecting the manifest.  Software updates and Trusted Invocation
   both tend to use sequences of common operations, so the manifest
   encodes those sequences of operations, rather than declaring the
   metadata.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-suit-manifest-22'/>
   
</reference>


<reference anchor='I-D.ietf-cose-aes-ctr-and-cbc'>
   <front>
      <title>CBOR Object Signing and Encryption (COSE): AES-CTR and AES-CBC</title>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Hannes Tschofenig' initials='H.' surname='Tschofenig'>
         <organization>Arm Limited</organization>
      </author>
      <date day='19' month='January' year='2023'/>
      <abstract>
	 <t>   The Concise Binary Object Representation (CBOR) data format is
   designed for small code size and small message size.  CBOR Object
   Signing and Encryption (COSE) is specified in RFC 9052 to provide
   basic security services using the CBOR data format.  This document
   specifies the conventions for using AES-CTR and AES-CBC as Content
   Encryption algorithms with COSE.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-cose-aes-ctr-and-cbc-03'/>
   
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC9019'>
<front>
<title>A Firmware Update Architecture for Internet of Things</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='D. Brown' initials='D.' surname='Brown'><organization/></author>
<author fullname='M. Meriac' initials='M.' surname='Meriac'><organization/></author>
<date month='April' year='2021'/>
<abstract><t>Vulnerabilities in Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism suitable for devices with resource constraints. Incorporating such an update mechanism is a fundamental requirement for fixing vulnerabilities, but it also enables other important capabilities such as updating configuration settings and adding new functionality.</t><t>In addition to the definition of terminology and an architecture, this document provides the motivation for the standardization of a manifest format as a transport-agnostic means for describing and protecting firmware updates.</t></abstract>
</front>
<seriesInfo name='RFC' value='9019'/>
<seriesInfo name='DOI' value='10.17487/RFC9019'/>
</reference>



<reference anchor='RFC9124'>
<front>
<title>A Manifest Information Model for Firmware Updates in Internet of Things (IoT) Devices</title>
<author fullname='B. Moran' initials='B.' surname='Moran'><organization/></author>
<author fullname='H. Tschofenig' initials='H.' surname='Tschofenig'><organization/></author>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<date month='January' year='2022'/>
<abstract><t>Vulnerabilities with Internet of Things (IoT) devices have raised the need for a reliable and secure firmware update mechanism that is also suitable for constrained devices. Ensuring that devices function and remain secure over their service lifetime requires such an update mechanism to fix vulnerabilities, update configuration settings, and add new functionality.</t><t>One component of such a firmware update is a concise and machine-processable metadata document, or manifest, that describes the firmware image(s) and offers appropriate protection. This document describes the information that must be present in the manifest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9124'/>
<seriesInfo name='DOI' value='10.17487/RFC9124'/>
</reference>



<reference anchor='RFC8937'>
<front>
<title>Randomness Improvements for Security Protocols</title>
<author fullname='C. Cremers' initials='C.' surname='Cremers'><organization/></author>
<author fullname='L. Garratt' initials='L.' surname='Garratt'><organization/></author>
<author fullname='S. Smyshlyaev' initials='S.' surname='Smyshlyaev'><organization/></author>
<author fullname='N. Sullivan' initials='N.' surname='Sullivan'><organization/></author>
<author fullname='C. Wood' initials='C.' surname='Wood'><organization/></author>
<date month='October' year='2020'/>
<abstract><t>Randomness is a crucial ingredient for Transport Layer Security (TLS) and related security protocols.  Weak or predictable &quot;cryptographically secure&quot; pseudorandom number generators (CSPRNGs) can be abused or exploited for malicious purposes. An initial entropy source that seeds a CSPRNG might be weak or broken as well, which can also lead to critical and systemic security problems. This document describes a way for security protocol implementations to augment their CSPRNGs using long-term private keys. This improves randomness from broken or otherwise subverted CSPRNGs.</t><t>This document is a product of the Crypto Forum Research Group (CFRG) in the IRTF.</t></abstract>
</front>
<seriesInfo name='RFC' value='8937'/>
<seriesInfo name='DOI' value='10.17487/RFC8937'/>
</reference>



<reference anchor='RFC2630'>
<front>
<title>Cryptographic Message Syntax</title>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<date month='June' year='1999'/>
<abstract><t>This document describes the Cryptographic Message Syntax.  This syntax is used to digitally sign, digest, authenticate, or encrypt arbitrary messages.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2630'/>
<seriesInfo name='DOI' value='10.17487/RFC2630'/>
</reference>


<reference anchor="iana-algo" target="https://www.iana.org/assignments/cose/cose.xhtml">
  <front>
    <title>CBOR Object Signing and Encryption (COSE)</title>
    <author >
      <organization>Internet Assigned Numbers Authority</organization>
    </author>
    <date year="2023"/>
  </front>
</reference>


    </references>


<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>We would like to thank Henk Birkholz for his feedback on the CDDL description in this document. 
Additionally, we would like to thank Michael Richardson, Ãyvind RÃ¸nningstad, Dave Thaler, and 
Carsten Bormann for their review feedback. Finally, we would like to thank Dick Brooks for 
making us aware of the challenges firmware encryption imposes on binary analysis.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIALDGBWQAA+192XLbSJboOyP4Dxn2xFgqkxQA7up23+ZqqyzZLkl2VXVN
hQIkQRIlEKABUDK99HfcT5n3+bE5S2YiAZKyq7o7ZuLGVc+4SCKXkyfPlmdJ
VKvVcin108A7FaNwGm/XqTcTb9xtELmzRPihuHp7di0u3NCfe0malEvuZBJ7
d9/aehZNQ3cFg89id55WfS+dV5ONn1bnfry6d2Ov6vE4fhRWbatcmrqpt4ji
7alI0lm5VC756/hUrGOvWW93ruNNkjqW1bUcACT23FNx5U03sZ9uy6X7KL5d
xNFmfUpQlEu33hZ+m52KszD14tBLq0MEAgdNUjec3bhBFAJoWw8AXfun5ZIQ
8XzqzZJ0G6jfhUijqfnZD2demOpfkihOY2+eZD9sV/nvaexPs/bTaLWC/tlz
Pwz80JjN+5BWAz9JqzDQJAqgYTX67ik+Alyu3PXaDxcmPDeBd+dhswYuzN2k
yyjGpVTxOf35ITx9URPXyXQZzb3QX+hHvDcv3DD0kn3Po3gBe/nRxe051b96
K9cPTsWSutVS3e2vi9WHGuAZASnOf1kTL6JNEnjbwuSXmyTZeZSbV7zzF36g
d7oizs8HuqUix3ybHVB5/L/eYavEm9ZgG/JQEpD9mriIYjdUPzKE/dgLZ26Y
f5SHsBevxLm/8oEdVAM5s+xco85/dePVgamHNWga3RemHrp3/iz/ID/xuR+6
cVSYc4a9ahPs9deAGtSg155JXwJRuLfu1l25+XlfeuHOk/zEV6PB6wsxeF2D
7bge1goQ3HphLZX9a8j0QBrwANcuEI5yKYziFQx15xFZXY4Hjm131ed6vdtQ
n7tW0zE+19Xnjt3mNmfVYS2TKyspe/KPplHiVV0vqU7TuAqsX51OpqckXcJ5
EZCulQHStR0NSKdbb2tgW3WLPvtu6FbdYBFJ7sj4T+EsEz+ilyT+IgSJ+Wqz
mnhxInrUWtOrlMOD/utL8XrymzdNxRV0AIYXALOSuIB+cTR4fTU65l4zkJin
wrGcuhzFjRceCJxlmq6T05OT+/v7GoKJNHDiEggkgU4QKfRP7cMyXQXYu1yq
VqvAUyC03Cnx8fXST1DybLCPSNbe1J/7ICxSb7oM/fcb+AgYFEqKA6hJNE9R
sleEkvEwLMK/hiVHoRtIGkLAXTHZik3qw2/YNV164mx0PYYOpEjUZtaAILfC
XcSeR2AASOs4AiIHXMIA3noJv8duUAW5nvpTcTS6AuQM/TmAWn3hBQEMJI6G
L44Jj73RFY33Y+yuxRF8q7788bgm4L/DF+XSJoElrTeTAMYBDSJoXdEC2i63
4n7pB57gLoJauqibqskSljkTpHMMjYYD1Mx9i+a0xnXg+iFKelwJIGcKfLEG
ob+EMe79dAlaIryDhfqILtQoKw+1yA48Ndwh3LGVP5sFHn57LJDe4mi2mWJ3
/OndJggBOxPAcopbRzNoogSQYI/DRSKOzqLrYzHz7vwptFq6d56IXT8BmABm
4FgPPuFeuyL2At+dACYQnQnKXC/b7M0aKVKsgEBg+5IV9HZpoW6QgKRCLqW+
OBSsE0nNR6aQE4NIinB3UyR/Pai/chdIdYC8HGWUS8y/4t5NcAQviNYw1qdP
+6XCly8wfHEMRUu4meXSZBMCKhEtgHSXaNSdRJuU5tbwEB5CARiTcFeANjx4
kEbQKERSyLUn+CuEL/xdIRlaA0lNl8JPBaj2ALanxlwnYdTyCYhnFc28AJYm
5dKXLzBMClI14f0xmxLKly5NMMHFzL2YeWUHg4J71YAihDub+dwfNoo6IVfK
zcDf3QXsFfQBUEAMTGmyilpCnildMQNlm7ogV1DkuCkSCVHPyksSwAbJSiRy
HgZoYQYY2sUaQLol2sHNgV5zABjnANqZ+2iL+SBSUhAjCQKbMR8h0uA94FPk
KcSWH4M0cmPkhgqgeBpsZiRk09Sd3oKUAtEVg6bCxdLvU9irhJCSA2+CuhUY
/AX3Eul2DYsJgq0gXgEWhwUAK9yG0X3gzRae4n8W0bAePRTs0yrahERlfiwh
AV4Yo2z94IJ0ANzEHiAxrILGgHXABIBukAOrFcJ4dPn6Dci82Hu/8WMkZQUz
TciQEvkZ0mnl3kJLIL3VBvZvFQEcM5SZ002QEmmCakLh7X1YB5GfFkhzl32I
spFhcPlKWLCK+whfY9Ada5+2AKlr31bDpDOP4AOwmFULLYDKPH3y4C1Hrs3J
SIKzV5SbwK5APgAwSB8Wtar7nQsYBQoinpdSK/kT0omh+uAs4wFn4zLvI2TW
OHKnS6n+QBWwWNUaLIeiCplVARxqSGCLkVZYV5nCEnv0FUsM7LJXaekVGDpo
VwOJo5ejl6Dg5O4BqGCwk/iB9pupR0CHZJIgCtYR2AgooLGrRhfhIKIxEyXG
Yg/4vFxaesEauQjOYzA2KrYYhLBUOFtAenrvgT2JpAVdYJgC+bhxAjP7SOM4
C0mDhMH9kfQtwgc0tPBRG64iMNZcsjQQ61Ock4jJ3CzUBppwMmxU8lPDEQpl
i+QZAESeYyNcG8rQcFcBRcCOsDggY0BcQQTBKVKLyopIkKncBDdPmUTiaM/Q
xxVsss84qtDO0ySLTWz8jj+vgPqAHEXguTFJKVIPILq8dIrIg/97gUCySIU9
WakFIg9tSK1HYuGBaSCFFhxbETaUGBEilSzQhHUJ4gm4J9mwWZqiMC6I2sdi
oK0WJpFrmNQPoyBabJXkQJrCQ3kiHl28vbp+VOH/ilev6fPl6Ie3Z5ejIX6+
etE7P9cfVIurF6/fnsPzckl+zLrCgeRi9GrIveFXUfjpovfzI2aoR6/fXJ+9
ftU7f4Q+CyQd8lQw7UhxPJGkDKyFoobMi2Qa+xOS7KI/ePPv4SRZ/8lusErG
8wuoZPqMZ5MvX8olMAlCnjEKA7Qe8StsxxblB+wbDgSoByJeo6aEzYNpkiWc
2wRyV23XAAf7HT4Acbsr4C4Xzw4PCZ4HDKGKNFG+wcxQVgs1dWOgOyRy1Ofc
ysKVa+WApAargGOvF1NXLffZpiSxHwVBdE9U67kheTSw+3dwgMdup+IyCrS2
RJJKt0yHOCwSl6EEJFXXsPulmurwCACNB6e9g4OA5pBWEDJFpQAuuxt8VxI5
mrsJE0ROAKnlZBIbpHVFsAah5oQ5POcCfo9yKqRHhxfqWzXMl5dKkJtdsR1w
XQpT7rQd6LZ4WuW236x41M42HeyIzN3L7ftjJAN6YpCA5hA2BXKUgkuc+egM
m2xIeGtpy4dDLZPZ9AIw2HJgk0CeDM5SwDDabMAiYMzFoFejFBUzmsE054a1
gZJ0BRGV5yUvBDFMVjj+nIMWJk0263UUp/khkL4lXNqU14sCxCfbJPVWRBcg
9VCuihjoMCHrOolWaPmDLbWlAzjxH8BLLahP4oEydFOmkExfwkkvobGIjn2P
pSs0IW3C42xpgGlUDSJ0oTIlf/qEq6qC+oDNQbmSHAJZGfGxB/IukWayYXyB
hgZ8y73KTjC4baAX+VAezmMXBt4QCtl424ccxLX0Ckj2hPOSDxbkBla4czBy
9V5mxxmQT8DBYLzwJLwhcAAyLfBNyJPwKGpYssthECkEBG+AIkWmETLuYATD
iEIgpUDDEQgONOrpgRZvbK1L5wA+KZeAX7MeEz4JhLh7eOzQtgt5Hip7ZyEt
RCYZWPMIikaa4aKQv2SA4DrO+EdJrYAybwF0kcjzR3KLvdh2mW+RHzXmUUiS
DjSHNEx2zbjybLGXmuBQodeQotdeEg1t3JYMdiIGeAyWDyofKagPu0ryphit
8e9//7v29H7L39Oq/nv6uzp+Nj7+3o7s5PsDHc0ZTcgf7lhYI4wzZFYVn7/e
GZpzHxOMzwdbqzZjtTVP/0jvC+3LKS7zq313UfrP7GJAc4BkDnYtPNizhdAi
Q5vGAT0Ymhz1ec8mVg/80axXzFly1m/djT0A/wNdv3UfvwHD+38qTpBH0tOM
+A8tqDCGlCWfTsVjpTLZHf/skd4lw8AyjaHaoy9Sb5DHbMcvZbjP0HOQGQDk
d3BRtiq1NEGdIQ0Pb3bKNqRpc+B5zE1MTaH0cWZk+4mhoBF7R2hFZU7H4xp7
+nMjp3B4Tw9aB2pOP/RxVabKu6YzDcUiD/SVDp1EngWUcyIxlYl2Bm9WjGAc
UHorpaVxRFpMrgB2mvSZChoohWbEk+GJgkpNclhh8daB7Rl4H/wJbRse1kzP
CA4GM+TUZNGc2DlPJALdSeg4mG1DOLKxbUJDxTwDe8tJT4KxkODv2VZmOp7t
w9BDpx75HHvorZ6BNZH46DZVS5XbuU/37lk1nTek/lWozIXk1aoNLJLiRUNn
AtZnRsKpPNznpiFn4JEH+JvNyKhFYNlbjQGsG8lRQluNx0i97JBVpyp57PRC
9u0LsI+1C8VsgL4cKUMTP5ReLf3TvQ/HbDQd2ScNmyBDcUhWF72BNztW9MYo
pGUOpX89CwCo7ZSkpKFSbKgnlO7GebQJ9UJCNGOAwVkasIfrMUM/MgfKJVEI
fXCRwTfpLvdllEc6JGFoL0zoVCphw1Fu3sB5YuWl6NMG2z1R3jN1BqVTHB7d
xT7HLvla6Ywkw1Iu+wQ/MBYURRgBgKkbx75s7YfsYCC/w8yPcdV3XjUCAzAG
MqiuNWhI9IVWiZeaDSjE6E6X2ulkHNnF61AuNhPQN2fhPCoCxLGnbFgz9QQd
IBWQqejSyBrQwUke+6Z8zFbccGhC9JW76pCPJzA+D6hTvnLc4jYbR2x+OBoM
X1ThQF4TPyrhY7Di1F0rlyqdddDxUDkMi16FIAcbHSR2+epmqFDO5NgTAziy
wBZlhJYNdITiC/oX0Dj1bqtmD3Ro7sVkhcM4RKqzJMcvqEgwgKTngi/sbQZ1
w6dOXDJFinkFwHp+HHEoW8beJm6a4unC+7B0QexRwIoDKSQ9MU4Auzj14hAV
SJG1dxZeZGHczeJapd+LjAfCp2bbZ+ITmy45vxt2pnOc+nv2F2FX9jVMvPcb
9N9Wpf6BhhvgebMt5hIZQwlzUAzhi9p0AmRFcA2orez9f7g/OXxpjk3s53qn
0Fu2pd5X6G3BqO3NhUepCzcDCiGYbd6GSbGVfPyd+Ld/yyHnZqSlFTQh86kg
rcTJyTNx9DC/8uB71lpgheNvG724tWrkY0oYexASBEPYXcOIzFG+siRp1ciA
RXAGw+G5NCMf5yM9nx5L+aG8q/vjQJiBEoOII+9Kzk8NIkagr9D0GpJLGmSI
1lIqGiCXhRF+aBGtQE1SgIAUhhSAO8El9DOWS1I/fFMgCteB+t9Ic1BhNLBC
QAixC4X8TjLhhNZyJc3oTq1Zc1AQmxJUusRUm1bNqdnYRnsom3WM/tPkmRJB
pjfUhJSMCNx/3GR2mLZPQBIFUbhQZkzOb24EPXkB2UL3jlXB+IDUmy5GVvQT
pWO4646RVKGtwEC8llumXpRmDKBaxdCkLnkokqo80NB5tQlSfx2Yzp8KR/sE
JV3C5xiku4wFgq5ir2veTx5GHMdDMI4u7crVsTqXoEtMp8uo2GCGnktb21Ly
hHNVE+f+rXfvJ7DygTmcHEYOUi7JvtDhbI4oBUACxg/lHcjvL3nLZWemWzAO
jUA1htG13+uSkxkWoCJDDRIFbgRoEtwG5owPpEVCcc/oQEC/QzjLJZj8pfyG
MXwkaVS4wZYJRKNq9GpwpN1dFWSYY47JKZPODLmRl1v7xiT3MZCUdMSBZsRD
fm3Gyigak88TADgrGabYSt9LvHkSzPGTVOUY2En0wmEsXB48rqAM4KAYLVja
kChFahroIpSZLxwPSRXGtCbUg1AmkmK15QPnEg7F5ahDGlM1MQIT8/BobD7k
GS9buY7C0TGO8gPWcDZKOfRRcBRjNAB2JK2wj/jGRqIWQB+1Wq2CI9yER5ch
/SIU3uhn/5iG85/ZuGVhhkfF3IxIac5PQHjP/VTHx1XWAvOim+ZOxzl5QEhC
W4nXBWik5d6reHxM8iOMiI2Q4aXIQuZyp3GUJMYe1oSMRB/iMbDVgEqlFPFj
MyBA2DTSQhTiSUhEJDbJUEqDLXDahPgx5zeWREWRSUr8YcFFKIhozoy4BjhZ
YUv5VD6XDv29nISncQzLSsQgxX1tUzmtw9zKggDFjMCNzIUw/UMrd4ap+kwT
N76mCh6wSAnwRLKjufUmcZITIowUqSTKJFjQIQZAxGic4VMhvIN1kKz8NB/H
0yRTyFoql3QTzCKQLJRTnRvKJMUV0qEes/OnpAVd5f0xTv17Mt3IaTDz1h7l
5uc66tF0zsoc85xksp2cEgVriikg08BNEsPNQ8TzKkq9jF2UcaIsrgqnBujA
rjJAHDBA6myC5EwvzDTASFQkw+HSx2McdmmqO8zXwgMM+mfAyLyLpFU6cRM/
4yg+YksXIx7NtLAyTJmbnHMQc25hQeimYb796MWRCLxwkS51klDB9iBDbZvk
Nq2Q9muIEuUQwJ0iwZvvGIA2Z0+LtlqVyj97VxGYpYcpKJvFMief6NCLaDP8
SdkSJaQ1WChsMufWpokXzKU3yFeLULkcKWZvaatWZy+gKa4ltjnyzbW7WOQx
rHI1yJUync0CTDG/vUczUx8K9w3xTDxu1bqtI/PZMflg9p7kn+2DAyfI+dCe
iV/wQJSRghCn5skIjrlefLP0QH7ENyt3faNb0iltE2Y9T3cbG4+puYFmaB5u
gqBiHkD/BCJk6spgfIZr3YlKbTL5D0P8Ip4WafXXculXXOZhyMUzsO75GGjj
cQ3PxwYMxqmIA52+F2Pr70TgTrxAPLtzA0xg59bagybWEQwkz6UPYQJwrudv
quNiJZv/7N3vna2AgQf2NAEdJKw9W6d7G0Dv2TIaRUO6x5QBvSLxv29Ec+m/
B/VCNPYgCs+Gf3SL9JE7Y0B13ta8nDs0Z+z16Isp7Qr+1SyTlgITfkLePyU6
PXelpAQbBTKRGfPY0emdSQlW25gcibyTuUqV6CCvEoIO+NfyQ4oPXLWOfwHc
N9mwkjTknzqBnIpHcnmPKsZjkz681Trd3kTxTeLFGKECU0aTiPxDNMehG9y4
7kySin76axHjGuwdrOcBHiJartRXRn3voAStGLYUurezFQCFBLMERFSI9ljh
930qwdgLVDMuFixElJLnCeWjLvBdIYvliZ7lSX6a3AorQrk9i9tZyR/jiq7k
bA2YEI7Dk9F1eB2Zlibu0Flu5rYpp2/iUbYmSmit4zIrUxppAszvDRZiqASR
TaJHLdo7OkmtajsdGnKvA8CwZ1RynJxMJUGfvTsV1genVYF/Wx3816njvxb9
Mmvgv/MJ/U5Ppy49tfHfCT2t09OOhaOBuALidwt/j+jR2RAe3fqzqk3f36ij
AfxKtjEZRcCgQTHHhJrr+O/R0vtwfCqajVan1W3XHUv+aztW22k1W3ZrAN9a
8KvTGrbbLRt/xVatITxrw+eRKW/2OXZ8TPz8IEsyKgjYkTzaY5GomACQt2jS
ohyfHZ9qK2PYaVmdRqPesy34H/zbbAycVqvj1K3WsDHuO51Bz7L7jXq/Y41b
nXrD6jmW7ThWo9Fs9QHChjMsl+p2s2N3emOr23KcfmPcsMZ2u1uHht2h3Rla
g1Gv0Rrbze6g0R21YZx+q9EYShB4YSAw8VQOBHCABclxMvPdRRglmIAoy3fy
thTxTVXSS86cAquJRZEh/U6K0kE5dRbPkEyfDy6QVMVJ1mP5hBH1pJKJV+Wu
14OaatUY1r8zR0LNfwrjHUL2k6zpF3OyE+LIr1hJ5kRsYmXff4EhDAvKjWM4
W+UBWz6B9e0iJ9/o06HF5pvBn30qqvWclXfCOAbkgoDYad9AvCjiqttPsD0r
+kLbHGJo2P3myM7yfi+lGpvxK3+E/xybqR8m3Wl9ZhLySD4rWhWGKYGumgIf
YznCo8agYzUBpk572HIao2FzZA37/XavPW6Pe+1R/5E8w+cdaloi5QTBHB0C
Lh6CjnFwJQigdw+WOmrZI8DHuN8b2mO7P6479Wa/Pmg1BlbL6nZGvSawvlN3
WiA5x92G0wR5MW61x9a43xp0HafR6Y2cTrdnOU2n2RlbINd6w7bVsJua1x//
nlTix6Or4QtCkMx0ZDWpffcV6QKf4oh8/NU1RVkKRM77yZ5ON2OBJ2bTPZqO
ndaBu/Xi/BEOPX+nrJHO6amFBfHS7Es5T3jHxyfdnJkql/URiolr2XDANm8T
qVZzdmimUb8SeYFjAbreDP8izBMDAsjXz0tyjBkdOSOGk3e3iWPsuvbDTT09
KhI1D2fXpHnmSokuq0gyJCbooZogLcqodWYXYOSjF2a2RVIu8XYBV/TW6KTx
P4g+yjwMTiEJZMnZ2k3l4sYl5L02xJz02FF0AMwLEhQF56BRVCeLLlWmbWZR
7g9xRGK+CeboiXSV9U9pWogWyZZYHEcWYi7NBVZSrBNShVk0E8yeYghiAkub
0ZdyKTcAyt5oGgWqjgZW9c6MRH56vBN3zldH7eRtoIGziI30M5QXaP2aR5Us
eyBLZNFelqyfUXHMCUyZPxdLRjGijc4qmXguKEIm7dzVahNKiNENCASiIj4P
prBNow1oICoy3T5gB5dLR1QPw/yN+ViRrN3KzcwVyoiLrCaZUIS0JOvich5L
X6ZOy3JQWJH0yx1KcaJwhCGMKN0I6xIysiwE31iYI0tMo5gYkqI2xAOUqxR4
nLCG1WbhjLPZkF8XXMU5D9xkKabbKZYObGBDufxh7vqBlGsgimj75GEhEis/
9RfM7shotDgM9oTefWatV4SZ41GkOhbUqHaAH6KdBA5vf68DWR0wgK75k6rP
fAZ7I/NgONHFT2W5Im9E7HPGn3s460NXKzPzZrXaxGZXu0liXMEsqd4sYRZZ
BfMRhRIveoPjAvlP3RDZBlMFKKQGsgSEuKZhGJsOazuJLlLQ5RkA1k8YxFSf
+6Unfd8s77AOIjfHhKorWSNozfe1ndCRrLw7OLPf9Rm0GHXsUAfyklsfek0p
6hR00koJI+XBB1pGBzOnf5LzAcMousSKGSgbg63fgmsYS9I4d6iYqUD+lyzW
w0SImoEBoOYov3eSe1TVoZn+oFdajKya+kbKaH0qfCsTOCO+DWAo80Op35i4
9MJbRTHbJPzDin7AHit/Gke4FTEYKnRWxg1Jt2vCHayhehcFAHDgqU4k50Bt
J3gBEOHOp/gJRW6IcycgiG9Bn61JEWFqHRB0FOv8W6rqThjvrvRo0R1CsP6j
aA7mjGhUaYsxIJuDGKCbb2KkRioWT7zFiivRAVmREUeTzWNvQSk+0umVABQe
8+IkilJ06qPAybrJ3Khkn0I98rGAqqqkUxClyXFFZobtVsjWwLykjlUwVqJN
qsuf3Mwu4ScsQ8qlwk5IAYt3TDFRrWMYD9aEM+eD37sl7BMumgetY+RjmEs2
8j5kDpeRFU7fjCTjGRImihZOL5cOpKm3TmW1ti/zQbMAGF6lUMvlfuw5UDC4
KE1IgFBQDyaIvSxRWt5s4SuFlpVXoWcJt3PGB/okdRdk8AC+Kso7xn42jTSs
V9toLSvTDdMsMRYRVCmginUhyMVoEaLDm7VVMZEllHKqMCGSBvUH6OJUGYlK
0GDuNE0yk8MwmwDlV/kT0xYPcA/2um8IA+6RS+41CSSTwtgRKA/NGYqPpu4t
xaYxIDlP5XYa92MUgtdIIyy2SLTnI5GHSqOIsO7AEqBrVvaAJ1MgcH6Zootg
akqgy2g8sg83YYDZIY9mm9VqqzD4yCwg5zg1K9Ilsgxo8Tu5rgxAmJ1LOZkr
9B5IA4muC2Dm3cRsOCNIsOKhOTE2IBs+7041nu6/VcLI4NxDl8V9FyxScFkM
CkoE/ETL04vTmtLQP8WJj0hnFSc4JjpC2VNIvadt0LhADvnRyLfAYWUHDo/D
klfyuoBE39qg7x2Q4U4FuLyoAuQSnq7kSiVtaAPIzK135XqzCup49z4bsnaW
BVCoUiFK83mI6U4G+55DH0yGOFgrhACzA6HucKpmQ7zSxcer3bZoXPkUI1Yc
wJqMKCXmmG/vpK+nqtG3PB1hnIEUi8Bwe8DW1LX+URd7Y84AGm3sKefbjljq
4w0zsawHV0dOuQhOTaGMigJx8g0+EUm9YrIG2EkJ0N8E7NrQSNMyLtaS80P7
KVjHcdG21RIyx/9FATHFSyRkzJxcGSrhBIN/1Ux3wNMJ509MozWRlp8qmPJc
pZLA2C2i61b4SoR92gGlT2YJyKy0NV4gkUibIM5KcqS64TsgcTXq7InKCKXA
vDpd+mupxKU1kk8AIQPmTt6MhTwWAR+rOmt9/Y4pcHVmLYsadRNDJo5xC5IE
y5QiNM4oVYGNAEP9SmCO/BqoQDZ7wcqD/tV5kBN06EJ04xndEJLlmB8s/Tv8
97Rc+iz6mUr9tr/Pf3yuN5LUrnBfv3Gur5Vt6r8jKbrsY+xV+91/v2eufwxC
5389hPX/9RA2jv8BOrzSEuYbKfH/0+H/DIT/r9MhmnU91FT/Aghzvf4ohIPc
AZoyNf5Fc+lQm3k6z+pj+GTOPgfC2Dk1yKJrqgKOim75XEdeVDjKxJv8+VZa
RtoUzDn1OfcWjDiwbmaGa5Cvn1RxAFL6ZijAJ9tJmzN0AFpuwlvMj945laZR
zvVieK3yNrjKdcYMZhU3kG4w6QCQ+aL6jjU+NH7UORqZ184IHpdLZGRU0AGB
vdHnRgm8xYsXwZiSh1GCy6gkQU/SceZIcFW5slh4KZXOxRQV02EI4+BO1lLu
wF20gxlNdIOoafNLlO14AjAvWW05l/vBZgTenPwibG7C8U7dSqsKug3bGWea
eOgrNo9RupyZ9nq9idd49xmjMdEHtZ1wClmA8kBAvnDDIVnMIqG7Vnd6qxzT
4mWXAG6lXNIXHE287FZNFShJlX83qzJjdpr5C7ptcE86crnUqTVqnVqLE5IP
3wqmEoeoIoIvEXrwGuUvX8jPl1CIBAOcA7zHEpBMTluqUBtcX6oEdWrAtN1H
6hKDpbxkk1v2B8ca+cr7lfm+9m2DrHUwNk3uCzCxRrK6KVAOqm7823NFoPTj
YvBGygMkDkDQVoaWsqGYCvXdfms4MqCrslLwR5qpz1QMtPceZPPGH82BFTMZ
q5fLMjQuo5DFd9m1ZSzBAaG9YYZNCm7I0/Ce+HiymVRlYbq+x1U5e3NLyApm
5W0Qahl30mt2dPbuGLg4MOjcvNsM91hdw4yUoZwQ+/ZCpjViOLlcOnunnfYj
PmxX6TienQrRQ08ZJqqeR/M1pfurGBYFg94RnfApjUPuVBwkPSATN6EiGB4X
rMcT6cThoLfa2NwBk/3EKIPQmemhg2DnjEgStapENzIDpnjh9auAspVLnmfy
vkjlgC1pXO17Vd4kNca84J+X2MQrcuk2z5d+X4drddgbJ+YwgbzWWd2rpS9W
pYgi3ZBHfh+lq5LMOchxkMdqS+nKqTDbYFVfBbumvIVmwUAhao7oCsmDjM4V
1Vf5YWUGf1YUlMHPt54tueI+jRYcKzPuUVT5ZCiqZD0/V91RVTXHVdHtJBU1
e7PxuEC0JtUNki5VSRxZLMjooVbHky0lk1Izj+63UpCnbEUgUc+UslYemNjj
VBECB9DEvChvo9Pg1Xai04B9wKekrWxERRCu9rKpIHEW1IjC/KXVHO1vNZBK
Kob25cEaVrclY31H1ERfn475dLTNfAU6bzttiAKjXMKUuwmo6CNbDnKs6VBO
Ykmhh/Oc2K1nTrOVG1x7QlU6BSDJqumbzYp+NEC1qkZkmkWspCwc8ObIXOAG
gNKGBrliQCCUSyAIFjr2aSEt2s2di8be2Hlb+I2TpZXtuQpJwNDV6tHTY/xB
Gc3wtdjpc77TA0/UIE/5ydPMujZbf+ZPn/N9H3h6S/dHjdRT8+u3jPwwVA+v
86nseQgD4nc9GeQ3aODgDp57C+DBU8o0fOOLZ1kWsJaE0BQfDDITOnsyggeG
yp1vQnm9vhC38OjKvGqa7lyC/X4mfnp9mVFxPs9QySN19lGC87VqLq8DeKz0
JH57G1LtlGxb0SpUsSEwCHQn8ain3SsLU3W3SXZL8L208A9esy0no1xaWeOO
X4FrlUolsUgv1zksNPkeEj5OcXAURae63wX4kkLPRuiI9oBNHD8s8jcx51ud
PKDiATrGK7MRcgLyG8QdXY+gEvYKoOhxpFzLCkXQpsgkh9NsGqZNkmqdgKiA
vt8JlHfUR9cHr6QtbGgjJd9ZTQSYPAaILqZBZKkApobJvN38zpX8dYln73J8
cvbOMdNrD7PXH3uWiYf8V/X8c77/52L/B5/nRJfYI7q+Pv7X4HtgbW9sLd/p
q1OQ738cmV+VZFeeQfSYVQ/nwVpR0KTxjqABmVEQNOoGb7buVJ5zQpTzyy8j
OFpE8ZOEAiKneNRQLJbIV4IouzALJtLp6Mh4u8JuNhVlcOxNxszbidnlwEc+
x6fd2E/oPRXFRJHj2q+/7p5usgEYbMysWmIEL1J3kh7KkqBrRdLEBIhufJFR
r6FRJ3xNNTgSK3R5CV8xliU3ZQCNBsOrHvL5GqRAbKPayKo5iPL6o+dnr8Sb
y7N3PTjvvBz9TL+WSxdnz1/0FqPeRf/ieX/7/vnVRaML358PBvLz/ehF/7l1
796f9Xs//LDorf/2829/G7x9fn7RtN6hoT747eer9KenVve356tw+/2beD08
v/54svR/er287L0a9HpXoyAaufFi8/599/vluw++134Vre7evz/vXKZ35dKb
p2DZ/fjjdDm768XXyfzlbZoMfh59uH/5Ko1fvfjJ777u1189vQ97b9Pk4+rS
qV800pf+j3Jpo1fDPQszqkgoJzJZR5z4aL6MJ39fjcyRS+n4r1C/H49v++dn
AxON49v70f3PL15Gfzv7+Js16P3w85n8POz9MB0C4kbL793+8/eN8/fv765+
fjf9Odx8dL+PW+/9k9GkXJp8PFk14ndBePbT5P6l1X6xXZ9Peqv+xXTw28T9
eGk37q4Xs4/z5Pv78fnkonk7Sz++Pr+KgsWzZyYiipBJPNBdFEqPkYK/etFD
leGqaxoX9PYWaYmo45jyoVqnxYuE5FhV40KhYVaHo28hMe43y3iZiw+w9ADW
jUVIMg2UmB++z6Rf9tgo1TlRlzFxZrEqfj4RttU+4mqbE3Zj5f2R1fsYb8eP
4alzKv78Z1XqcyKXfAqfsl/1IPywqhMHq/4MW1ZB1Z4o1J1U9ncirY+t1ePl
k16j0bacxqDebfa7ltVtttqdgd1uDBpWuzmuq4aOPRo73V6z3bN6ltMZWrbV
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

-->

</rfc>

